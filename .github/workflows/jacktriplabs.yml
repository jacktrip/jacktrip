name: build and sign
on:
  workflow_dispatch:
  workflow_run:
    workflows:
      - build
    types:
      - completed
    branches: 
      - main
      - dev
jobs:
  sign:
    runs-on: ${{ matrix.runs-on }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false # don't abort if one of the build failse
      matrix:
        include:
          - name: Sign macOS artifacts
            release-name: macOS-x64
            build-job-name: macOS-x64-qmake-clang-static
            runs-on: macos-10.15
            binary-path: binary
            bundle-path: bundle
            installer-path: installer
            
          - name: Sign Windows artifacts
            release-name: Windows-x64
            build-job-name: Windows-x64-qmake-gcc-static-bundled_rtaudio
            runs-on: ubuntu-latest
            binary-path: binary
            installer-path: installer

    env:
      BUILD_PATH: ${{ github.workspace }}/builddir
      
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - name: set version string for artifacts
        shell: bash
        id: set-version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::7}
          fi
          if [[ -n "${{ matrix.release-name }}" && "$GITHUB_REF" == refs/tags/* ]]; then
            NAME="${{ matrix.release-name }}"
          else
            NAME="${{ matrix.build-job-name }}"
          fi
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=name::$NAME"
      - name: Retrieve binary artifact
        uses: actions/download-artifact@v2
        if: matrix.binary-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-binary
          path: ${{ env.BUILD_PATH }}/${{ matrix.binary-path }}
      - name: Retrieve Windows installer artifact
        uses: actions/download-artifact@v2
        if: runner.os == 'Linux' && matrix.installer-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer
          path: ${{ env.BUILD_PATH }}/${{ matrix.installer-path }}
      - name: install dependencies for macOS
        if: runner.os == 'macOS'
        env:
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        run: |
          brew install qt5
          brew link qt5 --force
          brew install packages
      - name: set signing secrets for macOS
        if: runner.os == 'macOS' && (matrix.bundle-path || matrix.installer-path)
        env:
          APP_SIGNING_CERT_BASE64: ${{ secrets.APP_SIGNING_CERT_BASE64}}
          INSTALLER_SIGNING_CERT_BASE64: ${{ secrets.INSTALLER_SIGNING_CERT_BASE64 }}
          CERT_PASSPHRASE: ${{ secrets.CERT_PASSPHRASE }}
          KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PWD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          INSTALLER_CERT_PATH=$RUNNER_TEMP/installer_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$APP_SIGNING_CERT_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$INSTALLER_SIGNING_CERT_BASE64" | base64 --decode --output $INSTALLER_CERT_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PWD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PWD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$CERT_PASSPHRASE" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERT_PATH -P "$CERT_PASSPHRASE" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: sign and notarize bundle and installer on macOS
        if: runner.os == 'macOS' && (matrix.bundle-path || matrix.installer-path)
        env:
          CERTIFICATE: ${{ secrets.APP_CERT_NAME }}
          PACKAGE_CERT: ${{ secrets.INSTALLER_CERT_NAME }}
          USERNAME: app@jacktrip.org
          PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PWD}}
        run: |
          # Copy jacktrip binary where assemple_app.sh looks for it
          cp ${{ env.BUILD_PATH }}/${{ matrix.binary-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-binary.zip ${{ env.BUILD_PATH }}/jacktrip.zip
          unzip ${{ env.BUILD_PATH }}/jacktrip.zip -x LICENSE* -d "${{ env.BUILD_PATH }}"
          rm ${{ env.BUILD_PATH }}/jacktrip.zip

          CONFIG=
          if [[ -n "${{ matrix.installer-path }}" ]]; then 
            CONFIG="-i -n -c \"${CERTIFICATE}\" -d \"${PACKAGE_CERT}\" -u \"${USERNAME}\" -p \"${PASSWORD}\" JackTrip org.jacktrip.jacktrip $CONFIG"
          fi
          cd macos
          echo $CONFIG | xargs ./assemble_app.sh
          echo "Assemble complete"
          if [[ -n ${{ matrix.bundle-path }} ]]; then
            mkdir -p $BUILD_PATH/${{ matrix.bundle-path }}
            zip --symlinks -r $BUILD_PATH/${{ matrix.bundle-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-application.zip *.app
            cd $GITHUB_WORKSPACE # we need to be in the root project directory for adding licenses
            zip -r $BUILD_PATH/${{ matrix.bundle-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-application.zip LICENSE.md LICENSES
          fi
          if [[ -n ${{ matrix.installer-path }} ]]; then
            cd $GITHUB_WORKSPACE/macos
            mkdir -p $BUILD_PATH/${{ matrix.installer-path }}
            cp -R package/build/*.pkg $BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.pkg
          fi      
      - name: sign artifacts on Windows
        if: runner.os == 'Linux' && matrix.installer-path
        env:
          TOTP: ${{ secrets.TOTP_SECRET }}
          CRED_ID: ${{ secrets.ESIGNER_CREDENTIAL_ID }}
          USERNAME: jacktrip
          PASSWORD: ${{ secrets.SSL_COM_PWD}}
        run: |
          cd win/CodeSignTool
          curl -L -O -J https://storage.googleapis.com/files.jacktrip.org/binaries/CodeSignTool/CodeSignTool-jars.zip
          unzip CodeSignTool-jars.zip
          mkdir signed
          ./CodeSignTool.sh sign -credential_id=$CRED_ID -username=$USERNAME -password=$PASSWORD -totp_secret=$TOTP -output_dir_path=signed -input_file_path=$BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.msi
          cp signed/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.msi $BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.msi
      - name: upload application bundle
        uses: actions/upload-artifact@v2
        if: matrix.bundle-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-application
          path: ${{ env.BUILD_PATH }}/${{ matrix.bundle-path }}
      - name: upload installer
        uses: actions/upload-artifact@v2
        if: matrix.installer-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer
          path: ${{ env.BUILD_PATH }}/${{ matrix.installer-path }}
  # release - list of files uploaded to GH release is specified in the *upload* step
  deploy_gh:
    if: startsWith(github.ref, 'refs/tags/') # run on tagged commits
    needs: sign
    runs-on: ubuntu-18.04
    name: 'deploy release'
    env:
      DOWNLOAD_PATH: ${{ github.workspace }}/Install
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.DOWNLOAD_PATH }} # no "name" paramter - download all artifacts
      - name: upload to the release page
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.DOWNLOAD_PATH }}/JackTrip*/*
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
