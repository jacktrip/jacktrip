name: build
on:
  push:
    branches:
      - main
      - dev
    tags:
      - '**'
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'documentation/**'
      - 'scripts/**'
      - 'README**'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'documentation/**'
      - 'scripts/**'
      - 'README**'
  release:
    types: [published]
  workflow_dispatch:
  schedule:
    - cron:  '0 0 * * 0' # run weekly to refresh static Qt cache
jobs:
  check-secrets:
    name: Check if secrets exist to determine if build & sign run
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.setvar.outputs.should_run }}
    steps:
      - id: setvar
        run: |
          if [[ "${{ secrets.APP_SIGNING_CERT_BASE64 }}" != "" && \
                "${{ secrets.INSTALLER_SIGNING_CERT_BASE64 }}" != "" && \
                "${{ secrets.CERT_PASSPHRASE }}" != "" && \
                "${{ secrets.APP_CERT_NAME }}" != "" && \
                "${{ secrets.INSTALLER_CERT_NAME }}" != "" && \
                "${{ secrets.APPLE_APP_SPECIFIC_PWD }}" != "" && \
                "${{ secrets.TOTP_SECRET }}" != "" && \
                "${{ secrets.ESIGNER_CREDENTIAL_ID }}" != "" && \
                "${{ secrets.SSL_COM_PWD }}" != "" && \
                "${{ secrets.KEYCHAIN_PWD }}" != "" ]]; \
          then
            echo "Secrets to sign artifacts were configured in the repo"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "Secrets to sign artifacts were not configured in the repo"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
  build:
    needs: check-secrets
    runs-on: ${{ matrix.runs-on }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false # don't abort if one of the build failse
      matrix:
        include:
          - name: Linux-x64-qmake-gcc-static
            runs-on: ubuntu-20.04
            system-rtaudio: false
            bundled-rtaudio: true # set either system-rtaudio or bundled-rtaudio as true, not both
            nogui: false
            novs: true
            weakjack: false
            # jacktrip-path: jacktrip # needed for binary upload
            # binary-path: binary # directory relative to build path; triggers artifact upload for jacktrip binary
            # bundle-path: bundle # directory relative to build path; triggers application bundle creation and upload (macOS)
            # installer-path: installer # directory relative to build path; triggers installer creation and upload (macOS, Windows)
            build-system: qmake # qmake, meson, cmake (todo)
            # meson-library-type: shared # shared, static, both
            # static-analysis: true # run clang-tidy static analysis (meson/Linux only)
            qt-version: '5.15.13'
            qt-type: 'static'
            qt-arch: 'amd64'

          - name: Linux-x64-meson-gcc-shared-nortaudio # meson shared build without rtaudio
            runs-on: ubuntu-22.04
            system-rtaudio: false
            bundled-rtaudio: false
            nogui: false
            weakjack: false
            # jacktrip-path: jacktrip
            # binary-path: binary
            build-system: meson
            meson-library-type: shared
            static-analysis: true

          - name: Linux-x64-docker-shared
            release-name: Linux-x64
            runs-on: ubuntu-22.04
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            weakjack: false
            jacktrip-path: jacktrip # needed for binary upload
            binary-path: binary # directory relative to build path; triggers artifact upload for jacktrip binary
            build-system: docker
            docker-image: ubuntu:jammy-20240911.1
            docker-platform: linux/amd64
            meson-library-type: shared

          - name: Linux-arm64-docker-shared
            release-name: Linux-arm64
            runs-on: ubuntu-22.04
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            weakjack: false
            jacktrip-path: jacktrip
            binary-path: binary
            build-system: docker
            docker-image: ubuntu:jammy-20240911.1
            docker-platform: linux/arm64
            meson-library-type: shared

          - name: Linux-x64-docker-nogui
            release-name: Linux-x64-nogui
            runs-on: ubuntu-22.04
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: true
            novs: true
            weakjack: false
            jacktrip-path: jacktrip
            binary-path: binary
            build-system: docker
            docker-image: ubuntu:focal-20241011
            docker-platform: linux/amd64
            meson-library-type: static
            qt-version: '6.5.3'
            qt-type: 'static'
            qt-arch: 'amd64'

          - name: Linux-arm64-docker-nogui
            release-name: Linux-arm64-nogui
            runs-on: ubuntu-22.04
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: true
            novs: true
            weakjack: false
            jacktrip-path: jacktrip
            binary-path: binary
            build-system: docker
            docker-image: ubuntu:focal-20241011
            docker-platform: linux/arm64
            meson-library-type: static
            qt-version: '6.5.3'
            qt-type: 'static'
            qt-arch: 'arm64'

          - name: Linux-arm32-docker-nogui
            release-name: Linux-arm32-nogui
            runs-on: ubuntu-22.04
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: true
            novs: true
            weakjack: false
            jacktrip-path: jacktrip
            binary-path: binary
            build-system: docker
            docker-image: debian:buster-20240612-slim
            docker-platform: linux/arm/v7
            meson-library-type: static
            qt-version: '5.15.13'
            qt-type: 'static'
            qt-arch: 'arm32'

          - name: macOS-x64-meson-clang-static
            release-name: macOS-x64-nogui
            runs-on: macos-13
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: true
            novs: true
            weakjack: true
            jacktrip-path: jacktrip
            binary-path: binary
            build-system: meson
            meson-library-type: static
            qt-version: '5.15.13'
            qt-type: 'static'
            macosx-architectures: 'x86_64;arm64'
            macosx-deployment-target: 10.13
            xcode-directory: /Applications/Xcode_14.2.app

          - name: macOS-x64-meson-clang-shared
            release-name: macOS-x64
            runs-on: macos-13
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            novs: false
            weakjack: true
            jacktrip-path: jacktrip
            # binary-path: binary # don't upload the binary itself since we upload the bundle
            bundle-path: bundle
            installer-path: installer
            build-system: meson
            meson-library-type: both
            qt-version: '6.2.6'
            qt-download-commit: 'b09fbe4'
            qt-type: 'dynamic'
            macosx-architectures: 'x86_64;arm64'
            macosx-deployment-target: 10.14
            xcode-directory: /Applications/Xcode_14.2.app

          - name: Windows-x64-meson-msvc-static
            release-name: Windows-x64-nogui
            runs-on: windows-2019
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: true
            novs: true
            weakjack: true
            qt-version: '5.15.13'
            qt-type: 'static'
            jacktrip-path: jacktrip.exe
            binary-path: binary
            build-system: meson
            meson-library-type: static

          - name: Windows-x64-meson-msvc-shared
            release-name: Windows-x64
            runs-on: windows-2019
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            novs: false
            weakjack: true
            qt-version: '6.5.3'
            qt-type: 'dynamic'
            jacktrip-path: jacktrip.exe
            installer-path: installer
            binary-path: binary
            build-system: meson
            meson-library-type: shared

    env:
      BUILD_PATH: ${{ github.workspace }}/builddir
      CLANG_TIDY_NAME: clang-tidy-result
      CLANG_TIDY_PATH: ${{ github.workspace }}/clang-tidy-result
      QT_DOWNLOAD_BASE_URL: 'https://files.jacktrip.org/contrib/qt'
      QT_DOWNLOAD_COMMIT: 'f82eab7'

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: set version string for artifacts
        shell: bash
        id: set-version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::7}
          fi
          if [[ -n "${{ matrix.release-name }}" && "$GITHUB_REF" == refs/tags/* ]]; then
            NAME="${{ matrix.release-name }}"
          else
            NAME="${{ matrix.name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "stamp=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT # set timestamp for cache
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Select Xcode version
        if: runner.os == 'macOS' && matrix.xcode-directory
        run: sudo xcode-select -s ${{ matrix.xcode-directory }}
      - name: install dependencies for Linux
        if: runner.os == 'Linux' && matrix.build-system != 'docker'
        run: |
          sudo chmod a+rwx /opt
          sudo apt-get update
          sudo apt-get install --yes build-essential git libclang-dev libdbus-1-dev cmake ninja-build libjack-dev
          if [[ -z "${{ matrix.qt-version }}" ]]; then
            sudo add-apt-repository universe
            sudo apt-get update
            if [[ "${{ matrix.runs-on }}" == "ubuntu-20.04" ]]; then
              sudo apt-get install --yes qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake qttools5-dev qtdeclarative5-dev libqt5svg5-dev libqt5websockets5-dev qtquickcontrols2-5-dev
            else
              sudo apt-get install --yes qt6-base-dev qt6-base-dev-tools qmake6 qt6-tools-dev qt6-declarative-dev qt6-webengine-dev qt6-webview-dev qt6-webview-plugins libqt6svg6-dev libqt6websockets6-dev libgl1-mesa-dev libqt6core5compat6-dev libqt6shadertools6-dev
              sudo qtchooser -install qt6 $(which qmake6)
              echo "QT_SELECT=qt6" >> $GITHUB_ENV
            fi
          fi
          if [[ "${{ matrix.nogui }}" != true && "${{ matrix.qt-type }}" == "static" ]]; then
            sudo apt-get install --yes libfreetype6-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev libdrm-dev libglu1-mesa-dev libwayland-dev libwayland-egl1-mesa libgles2-mesa-dev libwayland-server0 libwayland-egl-backend-dev libxcb1-dev libxext-dev libfontconfig1-dev libxrender-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev '^libxcb.*-dev' libxcb-render-util0-dev libxcomposite-dev libgtk-3-dev
          fi
          if [[ "${{ matrix.system-rtaudio }}" == true ]]; then 
            sudo apt-get install --yes librtaudio-dev
          fi
          if [[ "${{ matrix.bundled-rtaudio }}" == true ]]; then 
            sudo apt-get install --yes libasound2-dev libpulse-dev
          fi
          if [[ "${{ matrix.build-system }}" == "meson" ]]; then
            sudo apt-get install --yes help2man
            python -m pip install --upgrade pip
            pip install meson pyyaml Jinja2
          fi
      - name: install dependencies for macOS
        if: runner.os == 'macOS'
        env:
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
        run: |
          # brew install jack
          # instead of using homebrew, install jack 1.9.16 from the installer, which should provide compatibility with both jackosx and the newer jack2
          curl -L https://github.com/jackaudio/jack2-releases/releases/download/v1.9.16/jack2-macOS-v1.9.16.tar.gz -o jack2.tar.gz
          tar -xf jack2.tar.gz
          sudo installer -pkg jack2-osx-1.9.16.pkg -target /
          sudo chmod a+rwx /opt
          sudo spctl --master-disable
          brew update
          brew install ninja
          if [[ "${{ matrix.system-rtaudio }}" == true ]]; then 
            brew install rtaudio
            rm -f `brew --prefix rtaudio`/lib/*.dylib # remove the shared library, we want static only
          fi
          if [[ -n "${{ matrix.installer-path }}" ]]; then
            brew install packages
          fi
          if [[ "${{ matrix.build-system }}" == "meson" ]]; then
            # meson builds require help2man
            brew install help2man
            # use pip to install meson to avoid python dependency conflicts in HomeBrew
            python -m pip install --upgrade pip
            pip install meson
          fi
      - name: install dependencies for Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          if [[ "${{ matrix.build-system }}" == "meson" ]]; then
            # hack to get rid of faulty patch.exe since it breaks meson diff_files
            rm -f c:/Strawberry/c/bin/patch.exe c:/Strawberry/perl/site/bin/patch.exe c:/Strawberry/perl/bin/patch.exe "C:/Program Files/Git/usr/bin/patch.exe"
            # use working version of patch.exe in msys, see https://github.com/actions/runner-images/issues/1552
            echo "C:\msys64\usr\bin" >> $GITHUB_PATH
            # install older meson from choco which uses patch, since git is broken
            # see https://github.com/mesonbuild/meson/issues/12092 and https://github.com/mesonbuild/meson/pull/12248
            choco install meson --version=1.1.1 --no-progress
            echo "C:\Program Files\Meson" >> $GITHUB_PATH
            # disable gnu linker since it can conflict with MSVC
            rm -f /usr/bin/link.exe C:/msys64/usr/bin/link.EXE
          fi
          choco install jack --version=1.9.17 --no-progress
          choco install pkgconfiglite --no-progress
      - name: setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'
      - name: Download Qt build
        if: matrix.qt-version && matrix.qt-type
        shell: bash
        run: |
          QT_INSTALL_PATH=/opt
          if [[ "${{ runner.os }}" == 'Windows' ]]; then
            QT_INSTALL_PATH=/c/qt
            QT_DOWNLOAD_OS=win
            QT_DOWNLOAD_EXT=zip
          elif [[ "${{ runner.os }}" == 'Linux' ]]; then
            QT_DOWNLOAD_OS=linux
            QT_DOWNLOAD_EXT=tar.gz
          else
            QT_DOWNLOAD_OS=osx
            QT_DOWNLOAD_EXT=tar.gz
          fi
          if [[ -n "${{ matrix.qt-download-url }}" ]]; then
            QT_DOWNLOAD_URL="${{ matrix.qt-download-url }}"
          else
            if [[ -n "${{ matrix.qt-download-commit }}" ]]; then
              QT_DOWNLOAD_COMMIT="${{ matrix.qt-download-commit }}"
            fi
            if [[ -n "${{ matrix.qt-arch }}" ]]; then
              QT_DOWNLOAD_ARCH="-${{ matrix.qt-arch }}"
            fi
            QT_DOWNLOAD_URL="$QT_DOWNLOAD_BASE_URL/qt-${{ matrix.qt-version }}-${{ matrix.qt-type }}-${QT_DOWNLOAD_OS}${QT_DOWNLOAD_ARCH}-$QT_DOWNLOAD_COMMIT.$QT_DOWNLOAD_EXT"
          fi
          if [[ "${{ matrix.build-system }}" == "docker" ]]; then
            echo "QT_DOWNLOAD_URL=$QT_DOWNLOAD_URL" >> $GITHUB_ENV
          else
            mkdir -p $QT_INSTALL_PATH
            cd $QT_INSTALL_PATH
            echo "Downloading $QT_DOWNLOAD_URL"
            curl -L $QT_DOWNLOAD_URL -o qt.$QT_DOWNLOAD_EXT
            if [[ "${{ runner.os }}" == 'Windows' ]]; then
              unzip qt.$QT_DOWNLOAD_EXT
            else
              tar -xzf qt.$QT_DOWNLOAD_EXT
            fi
            rm qt.$QT_DOWNLOAD_EXT
          fi
      - name: Set Qt environment variables # needed to find qmake depending on the way qt was installed
        shell: bash
        if: matrix.qt-version && matrix.qt-type && matrix.build-system != 'docker'
        run: |
          if [[ "${{ runner.os }}" == 'Windows' ]]; then
            QT_PATH="c:\qt\qt-${{ matrix.qt-version }}-${{ matrix.qt-type }}"
            echo "$QT_PATH\bin" >> $GITHUB_PATH
            echo "QT_PATH=$QT_PATH" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH;$QT_PATH/lib/pkgconfig;$GITHUB_WORKSPACE/win" >> $GITHUB_ENV
            echo "CMAKE_PREFIX_PATH=$QT_PATH" >> $GITHUB_ENV
          else
            QT_PATH="/opt/qt-${{ matrix.qt-version }}-${{ matrix.qt-type }}"
            echo "$QT_PATH/bin" >> $GITHUB_PATH
            echo "QT_PATH=$QT_PATH" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=$QT_PATH/lib/pkgconfig" >> $GITHUB_ENV
            echo "CMAKE_PREFIX_PATH=$QT_PATH" >> $GITHUB_ENV
            if [[ "${{ runner.os }}" == 'macOS' ]]; then
              echo "DYLD_FRAMEWORK_PATH=$QT_PATH/lib" >> $GITHUB_ENV
            fi
          fi
      - name: Set up QEMU dependency
        if: matrix.build-system == 'docker' && needs.check-secrets.outputs.should_run == 'false'
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx (Local)
        if: matrix.build-system == 'docker' && needs.check-secrets.outputs.should_run == 'false'
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        if: matrix.build-system == 'docker' && needs.check-secrets.outputs.should_run == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx (Build Cloud)
        if: matrix.build-system == 'docker' && needs.check-secrets.outputs.should_run == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "jacktrip/test"
      - name: build JackTrip with QMake
        if: matrix.build-system == 'qmake'
        shell: bash
        run: |
          CONFIG_STRING="noclean -j4"
          if [[ -n "${{ matrix.qt-version }}" ]]; then
            if [[ "${{ matrix.qt-type }}" == "static" ]]; then
              CONFIG_STRING="static $CONFIG_STRING"
            fi
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              export QML_IMPORT_PATH="c:\qt\qt-${{ matrix.qt-version }}-${{ matrix.qt-type }}\qml"
              export QML2_IMPORT_PATH="c:\qt\qt-${{ matrix.qt-version }}-${{ matrix.qt-type }}\qml"
            else
              export QML_IMPORT_PATH="/opt/qt-${{ matrix.qt-version }}-${{ matrix.qt-type }}/qml"
              export QML2_IMPORT_PATH="/opt/qt-${{ matrix.qt-version }}-${{ matrix.qt-type }}/qml"
            fi
          fi
          if [[ "${{ matrix.system-rtaudio }}" == true ]] || [[ "${{ matrix.bundled-rtaudio }}" == true ]]; then 
            CONFIG_STRING="rtaudio $CONFIG_STRING"
          fi
          if [[ "${{ matrix.nojack }}" == true ]]; then 
            CONFIG_STRING="nojack $CONFIG_STRING"
          fi
          if [[ "${{ matrix.nogui }}" == true ]]; then 
            CONFIG_STRING="nogui $CONFIG_STRING"
          fi
          if [[ "${{ matrix.novs }}" == true ]]; then 
            CONFIG_STRING="novs $CONFIG_STRING"
          fi
          if [[ "${{  needs.check-secrets.outputs.should_run }}" == "true" ]]; then 
            CONFIG_STRING="vsftux $CONFIG_STRING"
          fi
          if [[ "${{ matrix.weakjack }}" == true ]]; then 
            CONFIG_STRING="weakjack $CONFIG_STRING"
          fi
          if [[ -n "${{ matrix.macosx-deployment-target }}" ]]; then 
            CONFIG_STRING="$CONFIG_STRING QMAKE_MACOSX_DEPLOYMENT_TARGET=${{ matrix.macosx-deployment-target }}"
          fi
          if [[ -n "${{ matrix.macosx-architectures }}" ]]; then 
            ./build $CONFIG_STRING "QMAKE_APPLE_DEVICE_ARCHS=${{ matrix.macosx-architectures }}"
          else
            ./build $CONFIG_STRING
          fi
      - name: build JackTrip with Meson
        if: matrix.build-system == 'meson' || matrix.build-system == 'docker'
        shell: bash
        run: |
          CONFIG_STRING="-Ddefault_library=${{ matrix.meson-library-type }}"
          if [[ "${{ matrix.system-rtaudio }}" == true ]] || [[ "${{ matrix.bundled-rtaudio }}" == true ]]; then 
            CONFIG_STRING="-Drtaudio=enabled $CONFIG_STRING"
          fi
          if [[ "${{ matrix.bundled-rtaudio }}" == true ]]; then 
            CONFIG_STRING="-Drtaudio:jack=disabled -Drtaudio:default_library=static $CONFIG_STRING"
            if [[ "${{ runner.os }}" == 'Windows' ]]; then 
              CONFIG_STRING="-Drtaudio:wasapi=enabled $CONFIG_STRING"
              # ASIO builds require Steinberg license; disable it if not CLI or signed builds from JackTrip Labs
              if [[ "${{ matrix.nogui }}" == true ]] || [[ "${{ needs.check-secrets.outputs.should_run }}" == "true" ]]; then
                CONFIG_STRING="-Drtaudio:asio=enabled $CONFIG_STRING"
              else
                CONFIG_STRING="-Drtaudio:asio=disabled $CONFIG_STRING"
              fi
            elif [[ "${{ runner.os }}" == 'Linux' ]]; then
              CONFIG_STRING="-Drtaudio:alsa=enabled -Drtaudio:werror=false $CONFIG_STRING"
              if [[ "${{ matrix.meson-library-type }}" == "static" ]]; then
                # PulseAudio is SLOW and brings in a lot of extra deps, so exclude it from static builds
                CONFIG_STRING="-Drtaudio:pulse=disabled $CONFIG_STRING"
              else
                CONFIG_STRING="-Drtaudio:pulse=enabled $CONFIG_STRING"
              fi
            fi
          fi
          if [[ "${{ matrix.nojack }}" == true ]]; then 
            CONFIG_STRING="-Djack=disabled $CONFIG_STRING"
          fi
          if [[ "${{ matrix.nogui }}" == true ]]; then 
            CONFIG_STRING="-Dnogui=true $CONFIG_STRING"
          elif [[ "${{ matrix.novs }}" == true ]]; then
            CONFIG_STRING="-Dnovs=true $CONFIG_STRING"
          elif [[ "${{ needs.check-secrets.outputs.should_run }}" == "true" ]]; then
            if [[ "${{ runner.os }}" == 'Windows' ]]; then
              # signed JTL builds for Windows use ASIO and Qt commercial license
              # because licenses for classic mode and Qt are not compatible with ASIO
              CONFIG_STRING="-Dnoclassic=true -Dqtedition=commercial $CONFIG_STRING"
            else
              # prefer virtual studio interface for JackTrip Labs builds on Linux
              CONFIG_STRING="-Dvsftux=true $CONFIG_STRING"
            fi
          fi
          if [[ "${{ matrix.weakjack }}" == true ]]; then 
            CONFIG_STRING="-Dweakjack=true $CONFIG_STRING"
          fi
          if [[ -n "${{ matrix.macosx-architectures }}" ]]; then
            # TODO: for now, just assume that we want universal if it is not empty
            if [[ -n "${{ matrix.macosx-deployment-target }}" ]]; then
              CONFIG_STRING="--native-file macos/meson_native_universal_${{ matrix.macosx-deployment-target }}.ini $CONFIG_STRING"
            else
              CONFIG_STRING="--native-file macos/meson_native_universal.ini $CONFIG_STRING"
            fi
          elif [[ -n "${{ matrix.macosx-deployment-target }}" ]]; then
            CONFIG_STRING="--native-file macos/meson_native_minversion_${{ matrix.macosx-deployment-target }}.ini $CONFIG_STRING"
          fi
          if [[ "${{ runner.os }}" == 'Windows' && "${{ matrix.qt-type }}" == "static" ]]; then
            CONFIG_STRING="-Db_vscrt=mt $CONFIG_STRING"
          fi
          echo "Meson config: ${CONFIG_STRING}"
          if [[ "${{ matrix.build-system }}" == "docker" ]]; then
            mkdir -p $BUILD_PATH
            if [[ "${{ matrix.docker-platform }}" == "linux/arm/v7" ]]; then
              # should be implied, but this is necessary for broken compiler on arm32
              CONFIG_STRING="-Dcpp_link_args='-no-pie' $CONFIG_STRING"
            else
              CONFIG_STRING="-Dwerror=true $CONFIG_STRING"
            fi
            docker buildx build --target=artifact --progress=plain -f linux/Dockerfile.build --output type=local,dest=$BUILD_PATH \
              --platform "${{ matrix.docker-platform }}" --build-arg BUILD_CONTAINER="${{ matrix.docker-image }}" \
              --build-arg MESON_ARGS="$CONFIG_STRING" \
              --build-arg QT_DOWNLOAD_URL="$QT_DOWNLOAD_URL" .
          else
            meson setup --buildtype release $CONFIG_STRING $BUILD_PATH
            meson compile -C $BUILD_PATH -v
          fi
      - name: validate desktop file
        if: runner.os == 'Linux' && !matrix.nogui
        shell: bash
        run: |
          DESKTOP_FILE_PATH=$BUILD_PATH/org.jacktrip.JackTrip.desktop
          if [[ "${{ matrix.build-system }}" == meson ]]; then 
            DESKTOP_FILE_PATH=$BUILD_PATH/linux/org.jacktrip.JackTrip.desktop
          fi
          echo "DESKTOP_FILE_PATH=$DESKTOP_FILE_PATH" >> $GITHUB_ENV
          sudo apt-get install --yes desktop-file-utils
          desktop-file-validate $DESKTOP_FILE_PATH
      - name: set signing secrets for macOS
        if: runner.os == 'macOS' && (matrix.bundle-path || matrix.installer-path) && needs.check-secrets.outputs.should_run == 'true'
        shell: bash
        env:
          APP_SIGNING_CERT_BASE64: ${{ secrets.APP_SIGNING_CERT_BASE64}}
          INSTALLER_SIGNING_CERT_BASE64: ${{ secrets.INSTALLER_SIGNING_CERT_BASE64 }}
          CERT_PASSPHRASE: ${{ secrets.CERT_PASSPHRASE }}
          KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PWD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          INSTALLER_CERT_PATH=$RUNNER_TEMP/installer_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$APP_SIGNING_CERT_BASE64" | base64 -d -o $CERTIFICATE_PATH
          echo -n "$INSTALLER_SIGNING_CERT_BASE64" | base64 -d -o $INSTALLER_CERT_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PWD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PWD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$CERT_PASSPHRASE" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERT_PATH -P "$CERT_PASSPHRASE" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: create app bundle and installer on macOS
        if: runner.os == 'macOS' && (matrix.bundle-path || matrix.installer-path)
        shell: bash
        env:
          CERTIFICATE: ${{ secrets.APP_CERT_NAME }}
          PACKAGE_CERT: ${{ secrets.INSTALLER_CERT_NAME }}
          USERNAME: app@jacktrip.org
          PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PWD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          CONFIG=
          if [[ -n "${{ matrix.installer-path }}" ]]; then 
            CONFIG="-i $CONFIG"
          fi
          SIGNED=
          if [[ "${{  needs.check-secrets.outputs.should_run }}" == "true" ]]; then 
            CONFIG="$CONFIG -n -k -c \"${CERTIFICATE}\" -d \"${PACKAGE_CERT}\" -u \"${USERNAME}\" -p \"${PASSWORD}\" -t \"${TEAM_ID}\" JackTrip org.jacktrip.jacktrip"
            SIGNED="-signed"
            echo "Secrets are available, the binaries will be signed."
          fi
          cd macos
          echo $CONFIG | xargs ./assemble_app.sh
          echo "Assemble complete"
          if [[ -n ${{ matrix.bundle-path }} ]]; then
            mkdir -p $BUILD_PATH/${{ matrix.bundle-path }}
            zip --symlinks -r $BUILD_PATH/${{ matrix.bundle-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}$SIGNED-application.zip *.app
            cd $GITHUB_WORKSPACE # we need to be in the root project directory for adding licenses
            zip -r $BUILD_PATH/${{ matrix.bundle-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}$SIGNED-application.zip LICENSE.md LICENSES
          fi
          if [[ -n ${{ matrix.installer-path }} ]]; then
            cd $GITHUB_WORKSPACE/macos
            mkdir -p $BUILD_PATH/${{ matrix.installer-path }}
            cp -R package/build/*.pkg $BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}$SIGNED-installer.pkg
          fi
      - name: create installer on Windows
        if: runner.os == 'Windows' && matrix.installer-path
        shell: cmd
        run: |
          cd win
          call "build_installer.bat"
          bash -c "mkdir -p $BUILD_PATH/${{ matrix.installer-path }}"
          bash -c "cp deploy/*.msi $BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.msi"
          rm -f deploy/*.msi deploy/*.wxs deploy/*.wixobj deploy/*.wixpdb deploy/vc_redist.x64.exe
      - name: compress the binary
        shell: bash
        if: matrix.binary-path
        run: |
          BINFILE=$BUILD_PATH/${{ matrix.jacktrip-path }}
          NAME=JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}
          ZIPFILE=$BUILD_PATH/${{ matrix.binary-path }}/$NAME-binary.zip
          mkdir -p $BUILD_PATH/${{ matrix.binary-path }}
          if [[ "${{ runner.os }}" == "Windows" && -n "${{ matrix.installer-path }}" ]]; then
            cd win
            mv deploy $NAME
            7z a $ZIPFILE -tzip $NAME
          else
            if [[ "${{ matrix.build-system }}" != "docker" ]]; then
              strip $BINFILE
            fi
            zip -j $ZIPFILE $BINFILE
            if [[ "${{ matrix.name }}" == "Linux-x64-docker-shared" || "${{ matrix.name }}" == "Linux-arm64-docker-shared" ]]; then
              cp $GITHUB_WORKSPACE/linux/icons/jacktrip.svg $BUILD_PATH/org.jacktrip.JackTrip.svg
              cp $GITHUB_WORKSPACE/linux/icons/jacktrip_48x48.png $BUILD_PATH/org.jacktrip.JackTrip.png
              zip -j $ZIPFILE $DESKTOP_FILE_PATH $BUILD_PATH/jacktrip.1.gz $BUILD_PATH/org.jacktrip.JackTrip.svg $BUILD_PATH/org.jacktrip.JackTrip.png $GITHUB_WORKSPACE/linux/README.md
            fi
            cd $GITHUB_WORKSPACE # we need to be in the root project directory for adding licenses
            zip -r $ZIPFILE LICENSE.md LICENSES
          fi
      - name: upload jacktrip binary
        uses: actions/upload-artifact@v4
        if: matrix.binary-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-binary
          path: ${{ env.BUILD_PATH }}/${{ matrix.binary-path }}
      - name: upload application bundle
        uses: actions/upload-artifact@v4
        if: matrix.bundle-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name)) &&  needs.check-secrets.outputs.should_run != 'true'
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-application
          path: ${{ env.BUILD_PATH }}/${{ matrix.bundle-path }}
      - name: upload signed application bundle
        uses: actions/upload-artifact@v4
        if: matrix.bundle-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name)) &&  needs.check-secrets.outputs.should_run == 'true'
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-signed-application
          path: ${{ env.BUILD_PATH }}/${{ matrix.bundle-path }}
      - name: upload installer
        uses: actions/upload-artifact@v4
        if: matrix.installer-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name)) && ( needs.check-secrets.outputs.should_run != 'true' || runner.os == 'Windows')
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer
          path: ${{ env.BUILD_PATH }}/${{ matrix.installer-path }}
      - name: upload signed installer
        uses: actions/upload-artifact@v4
        if: matrix.installer-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name)) && needs.check-secrets.outputs.should_run == 'true' && runner.os != 'Windows'
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-signed-installer
          path: ${{ env.BUILD_PATH }}/${{ matrix.installer-path }}
      - name: analyze build
        if: github.event_name == 'pull_request' && matrix.static-analysis == true
        shell: bash
        run: |
          sudo apt-get install --yes clang-tidy
          mkdir $CLANG_TIDY_PATH
          git diff -U0 origin/${{ github.base_ref }} | clang-tidy-diff -p1 -path $BUILD_PATH -export-fixes $CLANG_TIDY_PATH/fixes.yml
      - name: save PR metadata for static analysis
        if: github.event_name == 'pull_request' && matrix.static-analysis == true
        shell: bash
        run: |
          echo ${{ github.event.number }} > $CLANG_TIDY_PATH/pr-id.txt
          echo ${{ github.event.pull_request.head.repo.full_name }} > $CLANG_TIDY_PATH/pr-head-repo.txt
          echo ${{ github.event.pull_request.head.ref }} > $CLANG_TIDY_PATH/pr-head-ref.txt
      - name: upload static analysis
        if: github.event_name == 'pull_request' && matrix.static-analysis == true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CLANG_TIDY_NAME }}
          path: ${{ env.CLANG_TIDY_PATH }}/
  sign:
    needs: [build, check-secrets]
    runs-on: ${{ matrix.runs-on }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false # don't abort if one of the build false
      matrix:
        include:
          - name: Sign Windows artifacts
            release-name: Windows-x64
            build-job-name: Windows-x64-meson-msvc-shared
            runs-on: ubuntu-latest
            binary-path: binary
            installer-path: installer

    env:
      BUILD_PATH: ${{ github.workspace }}/builddir

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
        if: needs.check-secrets.outputs.should_run == 'true'
      - name: set version string for artifacts
        if: needs.check-secrets.outputs.should_run == 'true'
        shell: bash
        id: set-version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::7}
          fi
          if [[ -n "${{ matrix.release-name }}" && "$GITHUB_REF" == refs/tags/* ]]; then
            NAME="${{ matrix.release-name }}"
          else
            NAME="${{ matrix.build-job-name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
      - name: Retrieve binary artifact
        uses: actions/download-artifact@v4
        if: (matrix.binary-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))) && needs.check-secrets.outputs.should_run == 'true'
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-binary
          path: ${{ env.BUILD_PATH }}/${{ matrix.binary-path }}
      - name: Retrieve Windows installer artifact
        uses: actions/download-artifact@v4
        if: (runner.os == 'Linux' && matrix.installer-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))) && needs.check-secrets.outputs.should_run == 'true'
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer
          path: ${{ env.BUILD_PATH }}/${{ matrix.installer-path }}
      - name: sign artifacts for Windows
        if: runner.os == 'Linux' && matrix.installer-path && needs.check-secrets.outputs.should_run == 'true'
        env:
          TOTP: ${{ secrets.TOTP_SECRET }}
          CRED_ID: ${{ secrets.ESIGNER_CREDENTIAL_ID }}
          USERNAME: jacktrip
          PASSWORD: ${{ secrets.SSL_COM_PWD}}
        run: |
          cd win/CodeSignTool
          curl -L -O -J https://storage.googleapis.com/files.jacktrip.org/binaries/CodeSignTool/CodeSignTool-jars.zip
          unzip CodeSignTool-jars.zip
          mkdir signed
          ./CodeSignTool.sh sign -credential_id=$CRED_ID -username=$USERNAME -password=$PASSWORD -totp_secret=$TOTP -output_dir_path=signed -input_file_path=$BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.msi
          cp signed/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.msi $BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-signed-installer.msi
          rm $BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.msi
      - name: upload installer
        uses: actions/upload-artifact@v4
        if: (matrix.installer-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))) && needs.check-secrets.outputs.should_run == 'true'
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-signed-installer
          path: ${{ env.BUILD_PATH }}/${{ matrix.installer-path }}
  # release - list of files uploaded to GH release is specified in the *upload* step
  deploy_gh:
    if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' # run on releases only
    needs: [build, sign]
    runs-on: ubuntu-latest
    name: 'deploy release'
    env:
      DOWNLOAD_PATH: ${{ github.workspace }}/Install
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.DOWNLOAD_PATH }} # no "name" parameter - download all artifacts
      - name: upload to the release page
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.DOWNLOAD_PATH }}/JackTrip*/*
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy_jtl:
    if:  startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' && needs.check-secrets.outputs.should_run == 'true'
    needs: [build, sign]
    runs-on: ${{ matrix.runs-on }}
    name: ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: Update Windows manifests
            if: needs.check-secrets.outputs.should_run == 'true'
            platform-name: win
            release-name: Windows-x64
            build-job-name: Windows-x64-meson-msvc-shared
            runs-on: ubuntu-latest
          - name: Update Mac manifests
            if: needs.check-secrets.outputs.should_run == 'true'
            platform-name: mac
            release-name: macOS-x64
            build-job-name: macOS-x64-meson-clang-shared
            runs-on: ubuntu-latest
          - name: Update Linux manifests
            if: needs.check-secrets.outputs.should_run == 'true'
            platform-name: linux
            release-name: Linux-x64
            build-job-name: Linux-x64-docker-shared
            runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    env:
      DOWNLOAD_PATH: ${{ github.workspace }}/Install
      GCP_IDP: ${{ secrets.GCP_IDP }}
      GCS_SVC_ACCT: ${{ secrets.GCS_SVC_ACCT }}
    steps:
      - name: set version string for manifests
        shell: bash
        id: set-version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::7}
          fi
          if [[ -n "${{ matrix.release-name }}" && "$GITHUB_REF" == refs/tags/* ]]; then
            NAME="${{ matrix.release-name }}"
          else
            NAME="${{ matrix.build-job-name }}"
          fi
          if [[ "${{ matrix.platform-name }}" == "mac" ]]; then
            EXTENSION=".pkg"
            TYPE="signed-installer"
          elif [[ "${{ matrix.platform-name }}" == "win" ]]; then
            EXTENSION=".msi"
            TYPE="signed-installer"
          else
            EXTENSION=".zip"
            TYPE="binary"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "extension=$EXTENSION" >> $GITHUB_OUTPUT
          echo "type=$TYPE" >> $GITHUB_OUTPUT
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.DOWNLOAD_PATH }}
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-${{ steps.set-version.outputs.type }}
      - name: Authenticate to GCS
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.GCP_IDP }}
          service_account: ${{ env.GCS_SVC_ACCT }}
          create_credentials_file: true
      - name: Upload files
        run: |
          # this feature seems to produce permission denied errors on osx and linux runners (for larger files)
          gcloud config set storage/parallel_composite_upload_enabled False
          gcloud storage cp ${{ env.DOWNLOAD_PATH }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-${{ steps.set-version.outputs.type }}${{ steps.set-version.outputs.extension }} gs://files.jacktrip.org/app-builds
      - name: Update edge manifests
        id: update-edge
        run: |
          mkdir ${{ env.DOWNLOAD_PATH }}/app-releases
          gcloud storage cp --recursive gs://files.jacktrip.org/app-releases/* ${{ env.DOWNLOAD_PATH }}/app-releases

          file_sha=$(shasum -a 256 ${{ env.DOWNLOAD_PATH }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-${{ steps.set-version.outputs.type }}${{ steps.set-version.outputs.extension }} | cut -d ' ' -f 1)
          file_size=$(stat -c%s ${{ env.DOWNLOAD_PATH }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-${{ steps.set-version.outputs.type }}${{ steps.set-version.outputs.extension }})
          echo "filesha=$file_sha" >> $GITHUB_OUTPUT
          echo "filesize=$file_size" >> $GITHUB_OUTPUT
          
          version_number=$(echo ${{ steps.set-version.outputs.version }} | cut -c 2- )
          echo "versionnum=$version_number" >> $GITHUB_OUTPUT

          # Define the JSON object to append
          new_object=$(cat <<EOF
          [{
            "version":  "$version_number",
            "changelog": "Full changelog at https://github.com/jacktrip/jacktrip/releases/tag/${{ steps.set-version.outputs.version }}",
            "download": {
                "date": "$(date "+%Y-%m-%dT00:00:00Z")",
                "url": "https://files.jacktrip.org/app-builds/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-${{ steps.set-version.outputs.type }}${{ steps.set-version.outputs.extension }}",
                "downloadSize": "$file_size",
                "sha256": "$file_sha"
            }
          }]
          EOF
          )

          if [[ "${{ matrix.platform-name }}" != "linux"  ]]; then
            # Read the existing JSON array from the file
            existing_array=$(jq '.releases' ${{ env.DOWNLOAD_PATH }}/app-releases/edge/${{ matrix.platform-name }}-manifests.json)

            # Combine the new object and the existing array into a new array
            new_array=$(echo "$new_object $existing_array" | jq -s 'add')

            # Update the "releases" key in the root object with the new array
            jq '.releases = '"$new_array" ${{ env.DOWNLOAD_PATH }}/app-releases/edge/${{ matrix.platform-name }}-manifests.json > tmpfile && mv tmpfile ${{ env.DOWNLOAD_PATH }}/app-releases/edge/${{ matrix.platform-name }}-manifests.json

            gcloud storage cp ${{ env.DOWNLOAD_PATH }}/app-releases/edge/${{ matrix.platform-name }}-manifests.json gs://files.jacktrip.org/app-releases/edge
          fi
      - name: Update stable manifests
        if: github.event_name == 'release' && !github.event.release.prerelease
        run: |
          # do the full release work
          file_sha=${{ steps.update-edge.outputs.filesha }}
          file_size=${{ steps.update-edge.outputs.filesize }}
          
          version_number=${{ steps.update-edge.outputs.versionnum }}

          # Define the JSON object to append
          new_object=$(cat <<EOF
          [{
            "version":  "$version_number",
            "changelog": "Full changelog at https://github.com/jacktrip/jacktrip/releases/tag/${{ steps.set-version.outputs.version }}",
            "download": {
                "date": "$(date "+%Y-%m-%dT00:00:00Z")",
                "url": "https://files.jacktrip.org/app-builds/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-${{ steps.set-version.outputs.type }}${{ steps.set-version.outputs.extension }}",
                "downloadSize": "$file_size",
                "sha256": "$file_sha"
            }
          }]
          EOF
          )

          # Read the existing JSON array from the file
          existing_array=$(jq '.releases' ${{ env.DOWNLOAD_PATH }}/app-releases/stable/${{ matrix.platform-name }}-manifests.json)

          # Combine the new object and the existing array into a new array
          new_array=$(echo "$new_object $existing_array" | jq -s 'add')

          # Update the "releases" key in the root object with the new array
          jq '.releases = '"$new_array" ${{ env.DOWNLOAD_PATH }}/app-releases/stable/${{ matrix.platform-name }}-manifests.json > tmpfile && mv tmpfile ${{ env.DOWNLOAD_PATH }}/app-releases/stable/${{ matrix.platform-name }}-manifests.json

          gcloud storage cp ${{ env.DOWNLOAD_PATH }}/app-releases/stable/${{ matrix.platform-name }}-manifests.json gs://files.jacktrip.org/app-releases/stable
  deploy_container:
    needs: [build, check-secrets]
    if: needs.check-secrets.outputs.should_run == 'true' && (github.ref == 'refs/heads/dev' || (startsWith(github.ref, 'refs/tags/') && github.event_name == 'release'))
    runs-on: ubuntu-latest
    name: 'deploy container'
    env:
      REGISTRY_IMAGE: jacktrip/jacktrip
      JACK_VERSION: 1.9.22-20240505
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=edge,branch=dev
            type=sha,branch=dev
            type=match,pattern=v(\d+.\d+)..*,group=1
            type=match,pattern=v(\d+.\d+.\d+).*,group=1,priority=950
            type=match,pattern=v(\d+.\d+.\d+-.*),group=1,priority=1000
          labels: |
            org.opencontainers.image.title=JackTrip
            org.opencontainers.image.description=Run a JackTrip hub server in a container
            org.opencontainers.image.vendor=JackTrip Labs, Inc.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "jacktrip/test"
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          build-args: |
            JACK_VERSION=${{ env.JACK_VERSION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # For pull requests, export results to the build cache.
          # Otherwise, push to a registry.
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry,push=true' }}
