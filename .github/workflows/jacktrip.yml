name: build
on: [push, pull_request]
jobs:
  skip-duplicates:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/README.md", "**/INSTALL*"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
  build:
    needs: skip-duplicates
    if: ${{ needs.skip-duplicates.outputs.should_skip != 'true' }}
    runs-on: ${{ matrix.runs-on }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false # don't abort if one of the build failse
      matrix:
        include:
          - name: Linux
            runs-on: ubuntu-18.04
            qmake-spec: linux-g++
            make-cmd: make

          - name: macOS
            runs-on: macos-10.15
            qmake-spec: macx-clang
            make-cmd: make
            rtaudio: true

          - name: macOS-static
            runs-on: macos-10.15
            qmake-spec: macx-clang
            make-cmd: make
            rtaudio: true
            static: true

          - name: macOS-static-nojack
            runs-on: macos-10.15
            qmake-spec: macx-clang
            make-cmd: make
            rtaudio: true
            static: true
            nojack: true

          - name: Windows
            runs-on: windows-2019
            qmake-spec: win32-g++
            make-cmd: mingw32-make
            rtaudio: true

          - name: Windows-static
            runs-on: windows-2019
            qmake-spec: win32-g++
            make-cmd: mingw32-make
            rtaudio: true
            static: true
          
          - name: Windows-static-nojack
            runs-on: windows-2019
            qmake-spec: win32-g++
            make-cmd: mingw32-make
            rtaudio: true
            static: true
            nojack: true

    env:
      SRC_PATH: ${{ github.workspace }}/src
      BUILD_PATH: ${{ github.workspace }}/builddir
      QT_VERSION: '5.15.2'
      DEVELOPER_DIR: '/Applications/Xcode_11.7.app/Contents/Developer' # specify XCode version on macOS
      QT_SRC_URL: 'https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz'
      QT_SRC_PATH: ${{ github.workspace }}/../qt-static-src
      QT_STATIC_BUILD_PATH: ${{ github.workspace }}/../qt-static
      QT_STATIC_CACHE_KEY: '5.15.2_v02' # update this to force rebuilding static Qt
      QT_STATIC_OPTIONS: '-static -release -optimize-size -no-pch -nomake tools -nomake tests -nomake examples -opensource -confirm-license -skip webengine -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcharts -skip qtdatavis3d -skip qtdeclarative -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtlottie -skip qtmultimedia -skip qtpurchasing -skip qtquick3d -skip qtpurchasing -skip qtquickcontrols -skip qtquickcontrols2 -skip qtquicktimeline -skip qtremoteobjects -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtsvg -skip qttools -skip qtvirtualkeyboard -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebglplugin -skip qtwebsockets -skip qtwebview -skip qtxmlpatterns' # common for all platforms
      
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install --yes libjack-dev qt5-default qt5-qmake qttools5-dev
      - name: install dependencies for macOS
        if: runner.os == 'macOS'
        env:
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        run: |
          if [[ "${{ matrix.nojack }}" != true ]]; then 
            # brew install jack
            # instead of using homebrew, install jack 1.9.16 from the installer, which should provide compatibility with both jackosx and the newer jack2
            curl -L https://github.com/jackaudio/jack2-releases/releases/download/v1.9.16/jack2-macOS-v1.9.16.tar.gz -o jack2.tar.gz
            tar -xf jack2.tar.gz
            sudo installer -pkg jack2-osx-1.9.16.pkg -target /
          fi
          if [[ "${{ matrix.static }}" != true ]]; then 
            brew install qt5
            brew link qt5 --force
          fi
          if [[ "${{ matrix.rtaudio }}" == true ]]; then 
            brew install rt-audio
            rm -f `brew --prefix rt-audio`/lib/*.dylib # remove the dynamic library, we want static only
          fi
      - name: install dependencies for Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          if [[ "${{ matrix.nojack }}" != true ]]; then 
            choco install jack --version=1.9.17
          fi
          choco install openssl
          if [[ "${{ matrix.rtaudio }}" == true ]]; then 
            choco install pkgconfiglite
            vcpkg install rtaudio --triplet=x64-mingw-static
            echo "PKG_CONFIG_PATH=$VCPKG_INSTALLATION_ROOT\installed\x64-mingw-static\lib\pkgconfig" >> $GITHUB_ENV
          fi
      - name: cache Qt
        id: cache-qt
        if: runner.os == 'Windows' && matrix.static != true
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache-${{ env.QT_VERSION }}
      - name: install Qt
        uses: jurplel/install-qt-action@v2
        if: runner.os == 'Windows' && matrix.static != true
        with:
          version: ${{ env.QT_VERSION }}
          arch: 'win64_mingw81'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: cache static Qt
        id: cache-static-qt
        if: matrix.static == true
        uses: actions/cache@v1
        with:
          path: ${{ env.QT_STATIC_BUILD_PATH }}
          key: ${{ runner.os }}-QtStaticCache-${{ env.QT_STATIC_CACHE_KEY }}
      - name: download Qt sources
        if: matrix.static == true && steps.cache-static-qt.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "Downloading Qt source"
          curl -L $QT_SRC_URL -o qt.tar.xz
          echo "Unpacking Qt source"
          tar -xf qt.tar.xz
          # move qt to a known location
          mv qt-everywhere* $QT_SRC_PATH
      - name: build static Qt on Linux / macOS
        if: matrix.static == true && steps.cache-static-qt.outputs.cache-hit != 'true' && runner.os != 'Windows'
        run: |
          mkdir $QT_STATIC_BUILD_PATH
          # configure
          "$QT_SRC_PATH/configure" -ltcg -prefix "$QT_STATIC_BUILD_PATH" $QT_STATIC_OPTIONS
          # build
          echo "building Qt"
          make -j4
          # install
          echo "installing Qt"
          make install
      - name: build static Qt on Windows
        if: matrix.static == true && steps.cache-static-qt.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: cmd
        run: |
          mkdir %QT_STATIC_BUILD_PATH%
          call "%QT_SRC_PATH%/configure.bat" -static-runtime -opengl desktop -platform win32-g++ -prefix "%QT_STATIC_BUILD_PATH%" -openssl OPENSSL_PREFIX="C:\Program Files\OpenSSL-Win64" %QT_STATIC_OPTIONS%
          echo "building Qt"
          mingw32-make -j4
          echo "installing Qt"
          mingw32-make install
      - name: build JackTrip
        shell: bash
        run: |
          mkdir $BUILD_PATH 
          cd $BUILD_PATH
          CONFIG_STRING=
          if [[ "${{ matrix.static }}" == true ]]; then 
            export PATH=$QT_STATIC_BUILD_PATH/bin:$PATH
            CONFIG_STRING="-config static $CONFIG_STRING"
          fi
          if [[ "${{ matrix.nojack }}" == true ]]; then 
            CONFIG_STRING="-config nojack $CONFIG_STRING"
          fi
          if [[ "${{ matrix.rtaudio }}" == true ]]; then 
            CONFIG_STRING="-config rtaudio $CONFIG_STRING"
          fi
          qmake -spec ${{ matrix.qmake-spec }} $CONFIG_STRING ../jacktrip.pro
          ${{ matrix.make-cmd }} release
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: JackTrip-${{ matrix.name }} # version number could be added here
          path: ${{ env.BUILD_PATH }}
          retention-days: 30 # remove artifacts after 30 days
