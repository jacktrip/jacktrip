name: build
on:
  push:
    branches:
      - main
      - dev
    tags:
      - '**'
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'documentation/**'
      - 'scripts/**'
      - 'README**'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'documentation/**'
      - 'scripts/**'
      - 'README**'
  release:
    types: [published]
  workflow_dispatch:
  schedule:
    - cron:  '0 0 * * 0' # run weekly to refresh static Qt cache
jobs:
  check-secrets:
    name: Check if secrets exist to determine if build & sign run
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.setvar.outputs.should_run }}
    steps:
      - id: setvar
        run: |
          if [[ "${{ secrets.APP_SIGNING_CERT_BASE64 }}" != "" && \
                "${{ secrets.INSTALLER_SIGNING_CERT_BASE64 }}" != "" && \
                "${{ secrets.CERT_PASSPHRASE }}" != "" && \
                "${{ secrets.APP_CERT_NAME }}" != "" && \
                "${{ secrets.INSTALLER_CERT_NAME }}" != "" && \
                "${{ secrets.APPLE_APP_SPECIFIC_PWD }}" != "" && \
                "${{ secrets.TOTP_SECRET }}" != "" && \
                "${{ secrets.ESIGNER_CREDENTIAL_ID }}" != "" && \
                "${{ secrets.SSL_COM_PWD }}" != "" && \
                "${{ secrets.KEYCHAIN_PWD }}" != "" ]]; \
          then
            echo "Secrets to sign artifacts were configured in the repo"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "Secrets to sign artifacts were not configured in the repo"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
  build:
    needs: check-secrets
    runs-on: ${{ matrix.runs-on }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false # don't abort if one of the build failse
      matrix:
        include:
          - name: Linux-x64-qmake-gcc-static
            release-name: Linux-x64 # specify a separate name for all builds that should be included in releases
            runs-on: ubuntu-20.04
            system-rtaudio: false
            bundled-rtaudio: true # set either system-rtaudio or bundled-rtaudio as true, not both
            nogui: false
            novs: false
            weakjack: false
            jacktrip-path: jacktrip # needed for binary upload
            binary-path: binary # directory relative to build path; triggers artifact upload for jacktrip binary
            # bundle-path: bundle # directory relative to build path; triggers application bundle creation and upload (macOS)
            # installer-path: installer # directory relative to build path; triggers installer creation and upload (macOS, Windows)
            build-system: qmake # qmake, meson, cmake (todo)
            # meson-library-type: shared # shared, static, both
            # static-analysis: true # run clang-tidy static analysis (meson/Linux only)
            qt-cache-key: 'v01-x86_64'
            qt-cache-version: '5.15.10'
            qt-cache-type: 'static'
            wait-for-qt-cache: false # if true, the job will wait for the static qt cache to be available; set to false for the first job on the given platform to build static qt and true for subsequent jobs using static qt for the given platofrm
            
          - name: Linux-x64-qmake-gcc-shared-no_rtaudio
            runs-on: ubuntu-22.04
            system-rtaudio: false
            bundled-rtaudio: false
            nogui: false
            novs: false
            weakjack: false
            # jacktrip-path: jacktrip
            # binary-path: binary
            build-system: qmake

          - name: Linux-x64-qmake-gcc-shared-bundled_rtaudio
            runs-on: ubuntu-22.04
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            novs: false
            weakjack: false
            # jacktrip-path: jacktrip
            # binary-path: binary
            build-system: qmake

          - name: Linux-x64-qmake-gcc-static-nogui
            release-name: Linux-x64-nogui
            runs-on: ubuntu-20.04
            system-rtaudio: false
            bundled-rtaudio: false
            nogui: true
            novs: true
            weakjack: false
            wait-for-qt-cache: true
            jacktrip-path: jacktrip
            binary-path: binary
            build-system: qmake
            qt-cache-key: 'v01-x86_64'
            qt-cache-version: '5.15.10'
            qt-cache-type: 'static'
            wait-for-qt-cache: true

          - name: Linux-x64-meson-gcc-shared-bundled_rtaudio
            runs-on: ubuntu-22.04
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            novs: false
            weakjack: false
            # jacktrip-path: jacktrip
            # binary-path: binary
            build-system: meson
            meson-library-type: shared
            static-analysis: true
            
          - name: Linux-x64-meson-gcc-shared # meson shared build without rtaudio
            runs-on: ubuntu-22.04
            system-rtaudio: false
            bundled-rtaudio: false
            nogui: false
            weakjack: false
            # jacktrip-path: jacktrip
            # binary-path: binary
            build-system: meson
            meson-library-type: shared

          - name: macOS-x64-qmake-clang-static-bundled_rtaudio
            release-name: macOS-x64
            runs-on: macos-12
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            novs: false
            weakjack: true
            macosx-deployment-target: 10.13
            macosx-architectures: 'x86_64 arm64'
            xcode-directory: /Applications/Xcode_14.0.1.app # uses SDK macOS 12.3 which is latest supported by qt
            jacktrip-path: jacktrip
            # binary-path: binary # don't upload the binary itself since we upload the bundle
            bundle-path: bundle
            installer-path: installer
            build-system: qmake
            qt-cache-key: 'v01-universal'
            qt-cache-version: '5.15.10'
            qt-cache-type: 'static'
            wait-for-qt-cache: false

          - name: macOS-x64-qmake-clang-shared
            runs-on: macos-12
            system-rtaudio: true
            bundled-rtaudio: false
            nogui: false
            novs: false
            weakjack: true
            # jacktrip-path: jacktrip
            # binary-path: binary
            # bundle-path: bundle
            # installer-path: installer
            build-system: qmake

          - name: macOS-x64-meson-clang-shared-bundled_rtaudio
            runs-on: macos-12
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            novs: false
            weakjack: true
            # jacktrip-path: jacktrip
            # binary-path: binary
            # bundle-path: bundle
            # installer-path: installer
            build-system: meson
            meson-library-type: both

          - name: Windows-x64-meson-msvc-shared
            runs-on: windows-2019
            system-rtaudio: true
            bundled-rtaudio: false
            nogui: false
            novs: false
            weakjack: true
            vcpkg-triplet: x64-windows
            qt-cache-key: 'v01-x86_64'
            qt-cache-version: '5.15.10'
            qt-cache-type: 'dynamic'
            wait-for-qt-cache: false
            # jacktrip-path: jacktrip.exe
            # binary-path: binary
            build-system: meson
            meson-library-type: shared

          - name: Windows-x64-meson-msvc-static-bundled_rtaudio
            runs-on: windows-2019
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            novs: false
            weakjack: true
            vcpkg-triplet: x64-windows
            qt-cache-key: 'v01-x86_64'
            qt-cache-version: '5.15.10'
            qt-cache-type: 'static'
            wait-for-qt-cache: false
            # jacktrip-path: jacktrip.exe
            # binary-path: binary
            build-system: meson
            meson-library-type: static

    env:
      BUILD_PATH: ${{ github.workspace }}/builddir
      CLANG_TIDY_NAME: clang-tidy-result
      CLANG_TIDY_PATH: ${{ github.workspace }}/clang-tidy-result
      VCPKG_COMMIT: '662dbb50e63af15baa2909b7eac5b1b87e86a0aa'
      
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: set version string for artifacts
        shell: bash
        id: set-version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::7}
          fi
          if [[ -n "${{ matrix.release-name }}" && "$GITHUB_REF" == refs/tags/* ]]; then
            NAME="${{ matrix.release-name }}"
          else
            NAME="${{ matrix.name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "stamp=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT # set timestamp for cache
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install vcpkg
        if: runner.os == 'Windows' && matrix.vcpkg-triplet
        shell: pwsh
        run: |
          $vcpkgCommit = "$env:VCPKG_COMMIT"
          pushd "$env:VCPKG_INSTALLATION_ROOT"
          git fetch --depth=1 origin $vcpkgCommit
          git reset --hard $vcpkgCommit
          ./bootstrap-vcpkg.bat
          popd
      - name: cache vcpkg archives on Windows
        if: runner.os == 'Windows' && matrix.vcpkg-triplet
        uses: actions/cache@v3
        with:
          path: ~/AppData/Local/vcpkg/archives
          key: ${{ matrix.runs-on }}-${{ matrix.vcpkg-triplet }}-${{ matrix.system-rtaudio }}-${{ steps.set-version.outputs.stamp }}
          restore-keys: ${{ matrix.runs-on }}-${{ matrix.vcpkg-triplet }}-${{ matrix.system-rtaudio }}
      - name: Select Xcode version
        if: runner.os == 'macOS' && matrix.xcode-directory
        run: sudo xcode-select -s ${{ matrix.xcode-directory }}
      - name: install dependencies for Linux
        if: runner.os == 'Linux'
        run: |
          sudo chmod a+rwx /opt
          sudo apt-get update
          sudo apt-get install --yes libjack-dev libclang-dev ninja-build
          if [[ -n "${{ matrix.qt-cache-key }}" ]]; then 
            sudo apt-get install --yes libfreetype6-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev libdrm-dev libglu1-mesa-dev libwayland-dev libwayland-egl1-mesa libgles2-mesa-dev libwayland-server0 libwayland-egl-backend-dev libxcb1-dev libxext-dev libfontconfig1-dev libxrender-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev '^libxcb.*-dev' libxcb-render-util0-dev libxcomposite-dev libgtk-3-dev
          else
            sudo add-apt-repository universe
            sudo apt-get update
            sudo apt-get install --yes qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake qttools5-dev libqt5networkauth5-dev qtdeclarative5-dev libqt5svg5-dev libqt5websockets5-dev qtquickcontrols2-5-dev
          fi
          if [[ "${{ matrix.system-rtaudio }}" == true ]]; then 
            sudo apt-get install --yes librtaudio-dev
          fi
          if [[ "${{ matrix.bundled-rtaudio }}" == true ]]; then 
            sudo apt-get install --yes libasound2-dev libpulse-dev
          fi
          if [[ "${{ matrix.build-system }}" == "meson" ]]; then
            sudo apt-get install --yes help2man clang-tidy
            python -m pip install --upgrade pip
            pip install meson pyyaml Jinja2
          fi
          if [[ "${{ matrix.nogui }}" == false ]]; then 
            sudo apt-get install --yes desktop-file-utils
          fi
      - name: install dependencies for macOS
        if: runner.os == 'macOS'
        env:
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        run: |
          # brew install jack
          # instead of using homebrew, install jack 1.9.16 from the installer, which should provide compatibility with both jackosx and the newer jack2
          curl -L https://github.com/jackaudio/jack2-releases/releases/download/v1.9.16/jack2-macOS-v1.9.16.tar.gz -o jack2.tar.gz
          tar -xf jack2.tar.gz
          sudo installer -pkg jack2-osx-1.9.16.pkg -target /
          sudo chmod a+rwx /opt
          brew install ninja
          if [[ -z "${{ matrix.qt-cache-key }}" ]]; then 
            brew install qt5
            brew link qt5 --force
          fi
          if [[ "${{ matrix.system-rtaudio }}" == true ]]; then 
            brew install rtaudio
            rm -f `brew --prefix rtaudio`/lib/*.dylib # remove the shared library, we want static only
          fi
          if [[ -n "${{ matrix.installer-path }}" ]]; then
            brew install packages
          fi
          if [[ "${{ matrix.build-system }}" == "meson" ]]; then
            brew install meson help2man
          fi
      - name: install dependencies for Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install jack --version=1.9.17 --no-progress
          if [[ "${{ matrix.build-system }}" == "qmake" && -n "${{ matrix.qt-cache-key }}" && -n "${{ matrix.vcpkg-triplet }}" ]]; then 
            vcpkg install openssl --triplet="${{ matrix.vcpkg-triplet }}"
          fi
          if [[ "${{ matrix.system-rtaudio }}" == true && -n "${{ matrix.vcpkg-triplet }}" ]]; then 
            choco install pkgconfiglite --no-progress
            # check out version only 5.2.0 of rtaudio library, as 6.0 will take time to migrate to
            # done by checking out specific commit of vcpkg
            cd $VCPKG_INSTALLATION_ROOT
            git fetch origin 8fd0679a9d64251cf634b5f58edc01a42a121097
            git checkout 8fd0679a9d64251cf634b5f58edc01a42a121097 -- ports/rtaudio
            vcpkg install rtaudio[asio] --triplet="${{ matrix.vcpkg-triplet }}"
            echo "PKG_CONFIG_PATH=$VCPKG_INSTALLATION_ROOT\installed\${{ matrix.vcpkg-triplet }}\lib\pkgconfig" >> $GITHUB_ENV
          fi
          if [[ "${{ matrix.build-system }}" == "meson" ]]; then
            python -m pip install --upgrade pip
            pip install meson ninja
            mv /usr/bin/link.exe /usr/bin/link_disabled # disable gnu linker
          fi
      - name: setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows' && matrix.build-system == 'meson' # MSVC used only by meson
      - name: Unix - load Qt from cache
        id: qt-cache-load-unix
        if: matrix.qt-cache-version && matrix.qt-cache-type && matrix.qt-cache-key && runner.os != 'Windows'
        uses: actions/cache@v3
        with:
          path: /opt/qt-${{ matrix.qt-cache-version }}-${{ matrix.qt-cache-type }}
          key: qt-cache-${{ matrix.qt-cache-version }}-${{ matrix.qt-cache-type }}-${{ runner.os }}-${{ matrix.qt-cache-key }}
      - name: Unix - build Qt from source
        if: matrix.qt-cache-version && matrix.qt-cache-type && matrix.qt-cache-key && runner.os != 'Windows' && steps.qt-cache-load-unix.outputs.cache-hit != 'true'
        env:
          QT_BUILD_ARCH: ${{ matrix.qt-cache-arch }}
        run: |
          mkdir -p /opt/qtbuild
          cp scripts/qt/* /opt/qtbuild
          cd /opt/qtbuild
          if [[ "${{ matrix.qt-cache-type }}" == "dynamic" ]]; then ./qtbuild.sh -dynamic ${{ matrix.qt-cache-version }}; else ./qtbuild.sh ${{ matrix.qt-cache-version }}; fi
      - name: Windows - load Qt from cache
        id: qt-cache-load-windows
        if: matrix.qt-cache-version && matrix.qt-cache-type && matrix.qt-cache-key && runner.os == 'Windows'
        uses: actions/cache@v3
        with:
          path: c:\qt\qt-${{ matrix.qt-cache-version }}-${{ matrix.qt-cache-type }}
          key: qt-cache-${{ matrix.qt-cache-version }}-${{ matrix.qt-cache-type }}-${{ runner.os }}-${{ matrix.qt-cache-key }}
      - name: Windows - build Qt from source
        if: matrix.qt-cache-version && matrix.qt-cache-type && matrix.qt-cache-key && runner.os == 'Windows' && steps.qt-cache-load-windows.outputs.cache-hit != 'true'
        env:
          QT_BUILD_ARCH: ${{ matrix.qt-cache-arch }}
        run: |
          mkdir C:\qt
          mkdir C:\qt\build
          copy scripts\qt\qtbuild.bat c:\qt\build\qtbuild.bat
          cd c:\qt\build
          if ( "${{ matrix.qt-cache-type }}" -eq "dynamic" ) { c:\qt\build\qtbuild.bat -dynamic ${{ matrix.qt-cache-version }} } else { c:\qt\build\qtbuild.bat ${{ matrix.qt-cache-version }} }
      - name: wait for Qt build
        if: matrix.wait-for-qt-cache == true
        shell: bash
        env: 
          CACHE_STRING: qt-cache-${{ matrix.qt-cache-version }}-${{ matrix.qt-cache-type }}-${{ runner.os }}-${{ matrix.qt-cache-key }} # should match the key in "cache static Qt" step
        run: |
          check_cache () {
            curl -sL -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/$GITHUB_REPOSITORY/actions/caches | grep $CACHE_STRING >/dev/null
            return $? # function returns 0 if cache is available
          } 
          if ! check_cache; then 
            echo "Qt cache not found for key" $CACHE_STRING 
            echo "Waiting for Qt build"
            while ! check_cache; do 
              echo -n "."
              sleep 60
            done
            echo "" "Qt cache is now available!"
          fi
      - name: set Qt environment variables # needed to find qmake depending on the way qt was installed
        shell: bash
        if: matrix.build-system == 'qmake'
        run: |
          if [[ -n "${{ matrix.qt-cache-key }}" ]]; then
            if [[ "${{ runner.os }}" == "windows" ]]; then
              echo "c:\qt\qt-${{ matrix.qt-cache-version }}-${{ qt-cache-type }}\bin" >> $GITHUB_PATH
            else
              echo "/opt/qt-${{ matrix.qt-cache-version }}-${{ qt-cache-type }}/bin" >> $GITHUB_PATH
            fi
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "`brew --prefix qt5`/bin" >> $GITHUB_PATH
          fi
      - name: build JackTrip with QMake
        if: matrix.build-system == 'qmake'
        shell: bash
        run: |
          CONFIG_STRING="noclean -j4"
          if [[ -n "${{ matrix.qt-cache-key }}" ]]; then 
            CONFIG_STRING="static $CONFIG_STRING"
            if [[ "${{ runner.os }}" == "windows" ]]; then
              export QML_IMPORT_PATH="c:\qt\qt-${{ matrix.qt-cache-version }}-${{ qt-cache-type }}\qml"
              export QML2_IMPORT_PATH="c:\qt\qt-${{ matrix.qt-cache-version }}-${{ qt-cache-type }}\qml"
            else
              export QML_IMPORT_PATH="/opt/qt-${{ matrix.qt-cache-version }}-${{ qt-cache-type }}/qml"
              export QML2_IMPORT_PATH="/opt/qt-${{ matrix.qt-cache-version }}-${{ qt-cache-type }}/qml"
            fi
          fi
          if [[ "${{ matrix.system-rtaudio }}" == true ]] || [[ "${{ matrix.bundled-rtaudio }}" == true ]]; then 
            CONFIG_STRING="rtaudio $CONFIG_STRING"
          fi
          if [[ "${{ matrix.nojack }}" == true ]]; then 
            CONFIG_STRING="nojack $CONFIG_STRING"
          fi
          if [[ "${{ matrix.nogui }}" == true ]]; then 
            CONFIG_STRING="nogui $CONFIG_STRING"
          fi
          if [[ "${{ matrix.novs }}" == true ]]; then 
            CONFIG_STRING="novs $CONFIG_STRING"
          fi
          if [[ "${{  needs.check-secrets.outputs.should_run }}" == "true" ]]; then 
            CONFIG_STRING="vsftux $CONFIG_STRING"
          fi
          if [[ "${{ matrix.weakjack }}" == true ]]; then 
            CONFIG_STRING="weakjack $CONFIG_STRING"
          fi
          if [[ -n "${{ matrix.macosx-deployment-target }}" ]]; then 
            CONFIG_STRING="$CONFIG_STRING QMAKE_MACOSX_DEPLOYMENT_TARGET=${{ matrix.macosx-deployment-target }}"
          fi
          if [[ -n "${{ matrix.macosx-architectures }}" ]]; then 
            ./build $CONFIG_STRING "QMAKE_APPLE_DEVICE_ARCHS=${{ matrix.macosx-architectures }}"
          else
            ./build $CONFIG_STRING
          fi
      - name: build JackTrip with Meson
        if: matrix.build-system == 'meson'
        shell: bash
        run: |
          CONFIG_STRING="-Ddefault_library=${{ matrix.meson-library-type }}"
          if [[ "${{ matrix.system-rtaudio }}" == true ]] || [[ "${{ matrix.bundled-rtaudio }}" == true ]]; then 
            CONFIG_STRING="-Drtaudio=enabled $CONFIG_STRING"
          fi
          if [[ "${{ matrix.bundled-rtaudio }}" == true ]]; then 
            CONFIG_STRING="-Drtaudio:jack=disabled -Drtaudio:alsa=disabled -Drtaudio:default_library=static $CONFIG_STRING"
            if [[ "${{ runner.os }}" == 'Windows' ]]; then 
              CONFIG_STRING="-Drtaudio:wasapi=enabled $CONFIG_STRING"
            fi
          fi
          if [[ "${{ matrix.nojack }}" == true ]]; then 
            CONFIG_STRING="-Djack=disabled $CONFIG_STRING"
          fi
          if [[ "${{ matrix.nogui }}" == true ]]; then 
            CONFIG_STRING="-Dnogui=true $CONFIG_STRING"
          fi
          if [[ "${{ matrix.weakjack }}" == true ]]; then 
            CONFIG_STRING="-Dweakjack=true $CONFIG_STRING"
          fi
          if [[ "${{ runner.os }}" == 'Linux' ]]; then
              CONFIG_STRING="-Dwerror=true $CONFIG_STRING"
          fi
          meson --buildtype release $CONFIG_STRING $BUILD_PATH
          cd $BUILD_PATH
          meson compile
      - name: validate desktop file
        if: runner.os == 'Linux' && !matrix.nogui
        shell: bash
        run: |
          DESKTOP_FILE_PATH=$BUILD_PATH/org.jacktrip.JackTrip.desktop
          if [[ "${{ matrix.build-system }}" == meson ]]; then 
            DESKTOP_FILE_PATH=$BUILD_PATH/linux/org.jacktrip.JackTrip.desktop
          fi
          desktop-file-validate $DESKTOP_FILE_PATH
      - name: set signing secrets for macOS
        if: runner.os == 'macOS' && (matrix.bundle-path || matrix.installer-path) && needs.check-secrets.outputs.should_run == 'true'
        shell: bash
        env:
          APP_SIGNING_CERT_BASE64: ${{ secrets.APP_SIGNING_CERT_BASE64}}
          INSTALLER_SIGNING_CERT_BASE64: ${{ secrets.INSTALLER_SIGNING_CERT_BASE64 }}
          CERT_PASSPHRASE: ${{ secrets.CERT_PASSPHRASE }}
          KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PWD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          INSTALLER_CERT_PATH=$RUNNER_TEMP/installer_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$APP_SIGNING_CERT_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$INSTALLER_SIGNING_CERT_BASE64" | base64 --decode --output $INSTALLER_CERT_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PWD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PWD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$CERT_PASSPHRASE" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERT_PATH -P "$CERT_PASSPHRASE" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: compress the binary
        shell: bash
        if: matrix.binary-path
        run: |
          BINFILE=$BUILD_PATH/${{ matrix.jacktrip-path }}
          ZIPFILE=$BUILD_PATH/${{ matrix.binary-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-binary.zip
          mkdir -p $BUILD_PATH/${{ matrix.binary-path }}
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            7z a $ZIPFILE -tzip $BINFILE $GITHUB_WORKSPACE/LICENSE.md $GITHUB_WORKSPACE/LICENSES/
          else
            strip $BINFILE
            zip -j $ZIPFILE $BINFILE
            if [[ "${{ matrix.name }}" == "Linux-x64-qmake-gcc-static" ]]; then
              cp $GITHUB_WORKSPACE/linux/icons/jacktrip.svg $BUILD_PATH/org.jacktrip.JackTrip.svg
              cp $GITHUB_WORKSPACE/linux/icons/jacktrip_48x48.png $BUILD_PATH/org.jacktrip.JackTrip.png
              zip -j $ZIPFILE $BUILD_PATH/org.jacktrip.JackTrip.desktop $BUILD_PATH/org.jacktrip.JackTrip.svg $BUILD_PATH/org.jacktrip.JackTrip.png $GITHUB_WORKSPACE/linux/README.md
            fi
            cd $GITHUB_WORKSPACE # we need to be in the root project directory for adding licenses
            zip -r $ZIPFILE LICENSE.md LICENSES
          fi
      - name: create app bundle and installer on macOS
        if: runner.os == 'macOS' && (matrix.bundle-path || matrix.installer-path)
        shell: bash
        env:
          CERTIFICATE: ${{ secrets.APP_CERT_NAME }}
          PACKAGE_CERT: ${{ secrets.INSTALLER_CERT_NAME }}
          USERNAME: app@jacktrip.org
          PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PWD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          CONFIG=
          if [[ -n "${{ matrix.installer-path }}" ]]; then 
            CONFIG="-i $CONFIG"
          fi
          SIGNED=
          if [[ "${{  needs.check-secrets.outputs.should_run }}" == "true" ]]; then 
            CONFIG="$CONFIG -n -k -c \"${CERTIFICATE}\" -d \"${PACKAGE_CERT}\" -u \"${USERNAME}\" -p \"${PASSWORD}\" -t \"${TEAM_ID}\" JackTrip org.jacktrip.jacktrip"
            SIGNED="-signed"
            echo "Secrets are available, the binaries will be signed."
          fi
          cd macos
          echo $CONFIG | xargs ./assemble_app.sh
          echo "Assemble complete"
          if [[ -n ${{ matrix.bundle-path }} ]]; then
            mkdir -p $BUILD_PATH/${{ matrix.bundle-path }}
            zip --symlinks -r $BUILD_PATH/${{ matrix.bundle-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}$SIGNED-application.zip *.app
            cd $GITHUB_WORKSPACE # we need to be in the root project directory for adding licenses
            zip -r $BUILD_PATH/${{ matrix.bundle-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}$SIGNED-application.zip LICENSE.md LICENSES
          fi
          if [[ -n ${{ matrix.installer-path }} ]]; then
            cd $GITHUB_WORKSPACE/macos
            mkdir -p $BUILD_PATH/${{ matrix.installer-path }}
            cp -R package/build/*.pkg $BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}$SIGNED-installer.pkg
          fi
      - name: create installer on Windows
        if: runner.os == 'Windows' && matrix.installer-path
        shell: cmd
        run: |
          cd win
          call "build_installer.bat"
          bash -c "mkdir -p $BUILD_PATH/${{ matrix.installer-path }}"
          bash -c "cp deploy/*.msi $BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.msi"
      - name: upload jacktrip binary
        uses: actions/upload-artifact@v3
        if: matrix.binary-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-binary
          path: ${{ env.BUILD_PATH }}/${{ matrix.binary-path }}
      - name: upload application bundle
        uses: actions/upload-artifact@v3
        if: matrix.bundle-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name)) &&  needs.check-secrets.outputs.should_run != 'true'
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-application
          path: ${{ env.BUILD_PATH }}/${{ matrix.bundle-path }}
      - name: upload signed application bundle
        uses: actions/upload-artifact@v3
        if: matrix.bundle-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name)) &&  needs.check-secrets.outputs.should_run == 'true'
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-signed-application
          path: ${{ env.BUILD_PATH }}/${{ matrix.bundle-path }}
      - name: upload installer
        uses: actions/upload-artifact@v3
        if: matrix.installer-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name)) && ( needs.check-secrets.outputs.should_run != 'true' || runner.os == 'Windows')
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer
          path: ${{ env.BUILD_PATH }}/${{ matrix.installer-path }}
      - name: upload signed installer
        uses: actions/upload-artifact@v3
        if: matrix.installer-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name)) && needs.check-secrets.outputs.should_run == 'true' && runner.os != 'Windows'
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-signed-installer
          path: ${{ env.BUILD_PATH }}/${{ matrix.installer-path }}
      - name: analyze build
        if: github.event_name == 'pull_request' && matrix.static-analysis == true
        shell: bash
        run: |
          mkdir $CLANG_TIDY_PATH
          git diff -U0 origin/${{ github.base_ref }} | clang-tidy-diff -p1 -path $BUILD_PATH -export-fixes $CLANG_TIDY_PATH/fixes.yml
      - name: save PR metadata for static analysis
        if: github.event_name == 'pull_request' && matrix.static-analysis == true
        shell: bash
        run: |
          echo ${{ github.event.number }} > $CLANG_TIDY_PATH/pr-id.txt
          echo ${{ github.event.pull_request.head.repo.full_name }} > $CLANG_TIDY_PATH/pr-head-repo.txt
          echo ${{ github.event.pull_request.head.ref }} > $CLANG_TIDY_PATH/pr-head-ref.txt
      - name: upload static analysis
        if: github.event_name == 'pull_request' && matrix.static-analysis == true
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CLANG_TIDY_NAME }}
          path: ${{ env.CLANG_TIDY_PATH }}/
  sign:
    needs: [build, check-secrets]
    runs-on: ${{ matrix.runs-on }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false # don't abort if one of the build false
      matrix:
        include:
          - name: Sign Windows artifacts
            release-name: Windows-x64
            build-job-name: Windows-x64-qmake-gcc-static-bundled_rtaudio
            runs-on: ubuntu-latest
            binary-path: binary
            installer-path: installer

    env:
      BUILD_PATH: ${{ github.workspace }}/builddir

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
        if: needs.check-secrets.outputs.should_run == 'true'
      - name: set version string for artifacts
        if: needs.check-secrets.outputs.should_run == 'true'
        shell: bash
        id: set-version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::7}
          fi
          if [[ -n "${{ matrix.release-name }}" && "$GITHUB_REF" == refs/tags/* ]]; then
            NAME="${{ matrix.release-name }}"
          else
            NAME="${{ matrix.build-job-name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
      - name: Retrieve binary artifact
        uses: actions/download-artifact@v2
        if: (matrix.binary-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))) && needs.check-secrets.outputs.should_run == 'true'
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-binary
          path: ${{ env.BUILD_PATH }}/${{ matrix.binary-path }}
      - name: Retrieve Windows installer artifact
        uses: actions/download-artifact@v2
        if: (runner.os == 'Linux' && matrix.installer-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))) && needs.check-secrets.outputs.should_run == 'true'
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer
          path: ${{ env.BUILD_PATH }}/${{ matrix.installer-path }}
      - name: sign artifacts for Windows
        if: runner.os == 'Linux' && matrix.installer-path && needs.check-secrets.outputs.should_run == 'true'
        env:
          TOTP: ${{ secrets.TOTP_SECRET }}
          CRED_ID: ${{ secrets.ESIGNER_CREDENTIAL_ID }}
          USERNAME: jacktrip
          PASSWORD: ${{ secrets.SSL_COM_PWD}}
        run: |
          cd win/CodeSignTool
          curl -L -O -J https://storage.googleapis.com/files.jacktrip.org/binaries/CodeSignTool/CodeSignTool-jars.zip
          unzip CodeSignTool-jars.zip
          mkdir signed
          ./CodeSignTool.sh sign -credential_id=$CRED_ID -username=$USERNAME -password=$PASSWORD -totp_secret=$TOTP -output_dir_path=signed -input_file_path=$BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.msi
          cp signed/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.msi $BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-signed-installer.msi
          rm $BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.msi
      - name: upload installer
        uses: actions/upload-artifact@v3
        if: (matrix.installer-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))) && needs.check-secrets.outputs.should_run == 'true'
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-signed-installer
          path: ${{ env.BUILD_PATH }}/${{ matrix.installer-path }}
  # release - list of files uploaded to GH release is specified in the *upload* step
  deploy_gh:
    if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' # run on releases only
    needs: [build, sign]
    runs-on: ubuntu-latest
    name: 'deploy release'
    env:
      DOWNLOAD_PATH: ${{ github.workspace }}/Install
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.DOWNLOAD_PATH }} # no "name" parameter - download all artifacts
      - name: upload to the release page
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.DOWNLOAD_PATH }}/JackTrip*/*
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy_jtl:
    if:  startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' && needs.check-secrets.outputs.should_run == 'true'
    needs: [build, sign]
    runs-on: ${{ matrix.runs-on }}
    name: ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: Update Windows manifests
            if: needs.check-secrets.outputs.should_run == 'true'
            platform-name: win
            release-name: Windows-x64
            build-job-name: Windows-x64-qmake-gcc-static-bundled_rtaudio
            runs-on: ubuntu-latest
          - name: Update Mac manifests
            if: needs.check-secrets.outputs.should_run == 'true'
            platform-name: mac
            release-name: macOS-x64
            build-job-name: macOS-x64-qmake-clang-static-bundled_rtaudio
            runs-on: ubuntu-latest
          - name: Update Linux manifests
            if: needs.check-secrets.outputs.should_run == 'true'
            platform-name: linux
            release-name: Linux-x64
            build-job-name: Linux-x64-qmake-gcc-static
            runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    env:
      DOWNLOAD_PATH: ${{ github.workspace }}/Install
      GCP_IDP: ${{ secrets.GCP_IDP }}
      GCS_SVC_ACCT: ${{ secrets.GCS_SVC_ACCT }}
    steps:
      - name: set version string for manifests
        shell: bash
        id: set-version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::7}
          fi
          if [[ -n "${{ matrix.release-name }}" && "$GITHUB_REF" == refs/tags/* ]]; then
            NAME="${{ matrix.release-name }}"
          else
            NAME="${{ matrix.build-job-name }}"
          fi
          if [[ "${{ matrix.platform-name }}" == "mac" ]]; then
            EXTENSION=".pkg"
            TYPE="signed-installer"
          elif [[ "${{ matrix.platform-name }}" == "win" ]]; then
            EXTENSION=".msi"
            TYPE="signed-installer"
          else
            EXTENSION=".zip"
            TYPE="binary"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "extension=$EXTENSION" >> $GITHUB_OUTPUT
          echo "type=$TYPE" >> $GITHUB_OUTPUT
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.DOWNLOAD_PATH }}
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-${{ steps.set-version.outputs.type }}
      - name: Authenticate to GCS
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.GCP_IDP }}
          service_account: ${{ env.GCS_SVC_ACCT }}
          create_credentials_file: true
      - name: Upload files
        run: |
          gcloud storage cp ${{ env.DOWNLOAD_PATH }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-${{ steps.set-version.outputs.type }}${{ steps.set-version.outputs.extension }} gs://files.jacktrip.org/app-builds
      - name: Update edge manifests
        id: update-edge
        run: |
          mkdir ${{ env.DOWNLOAD_PATH }}/app-releases
          gcloud storage cp --recursive gs://files.jacktrip.org/app-releases/* ${{ env.DOWNLOAD_PATH }}/app-releases

          file_sha=$(shasum -a 256 ${{ env.DOWNLOAD_PATH }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-${{ steps.set-version.outputs.type }}${{ steps.set-version.outputs.extension }} | cut -d ' ' -f 1)
          file_size=$(stat -c%s ${{ env.DOWNLOAD_PATH }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-${{ steps.set-version.outputs.type }}${{ steps.set-version.outputs.extension }})
          echo "filesha=$file_sha" >> $GITHUB_OUTPUT
          echo "filesize=$file_size" >> $GITHUB_OUTPUT
          
          version_number=$(echo ${{ steps.set-version.outputs.version }} | cut -c 2- )
          echo "versionnum=$version_number" >> $GITHUB_OUTPUT

          # Define the JSON object to append
          new_object=$(cat <<EOF
          [{
            "version":  "$version_number",
            "changelog": "Full changelog at https://github.com/jacktrip/jacktrip/releases/tag/${{ steps.set-version.outputs.version }}",
            "download": {
                "date": "$(date "+%Y-%m-%dT00:00:00Z")",
                "url": "https://files.jacktrip.org/app-builds/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-${{ steps.set-version.outputs.type }}${{ steps.set-version.outputs.extension }}",
                "downloadSize": "$file_size",
                "sha256": "$file_sha"
            }
          }]
          EOF
          )

          if [[ "${{ matrix.platform-name }}" != "linux"  ]]; then
            # Read the existing JSON array from the file
            existing_array=$(jq '.releases' ${{ env.DOWNLOAD_PATH }}/app-releases/edge/${{ matrix.platform-name }}-manifests.json)

            # Combine the new object and the existing array into a new array
            new_array=$(echo "$new_object $existing_array" | jq -s 'add')

            # Update the "releases" key in the root object with the new array
            jq '.releases = '"$new_array" ${{ env.DOWNLOAD_PATH }}/app-releases/edge/${{ matrix.platform-name }}-manifests.json > tmpfile && mv tmpfile ${{ env.DOWNLOAD_PATH }}/app-releases/edge/${{ matrix.platform-name }}-manifests.json

            gcloud storage cp ${{ env.DOWNLOAD_PATH }}/app-releases/edge/${{ matrix.platform-name }}-manifests.json gs://files.jacktrip.org/app-releases/edge
          fi
      - name: Update stable manifests
        if: github.event_name == 'release' && !github.event.release.prerelease
        run: |
          # do the full release work
          file_sha=${{ steps.update-edge.outputs.filesha }}
          file_size=${{ steps.update-edge.outputs.filesize }}
          
          version_number=${{ steps.update-edge.outputs.versionnum }}

          # Define the JSON object to append
          new_object=$(cat <<EOF
          [{
            "version":  "$version_number",
            "changelog": "Full changelog at https://github.com/jacktrip/jacktrip/releases/tag/${{ steps.set-version.outputs.version }}",
            "download": {
                "date": "$(date "+%Y-%m-%dT00:00:00Z")",
                "url": "https://files.jacktrip.org/app-builds/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-${{ steps.set-version.outputs.type }}${{ steps.set-version.outputs.extension }}",
                "downloadSize": "$file_size",
                "sha256": "$file_sha"
            }
          }]
          EOF
          )

          # Read the existing JSON array from the file
          existing_array=$(jq '.releases' ${{ env.DOWNLOAD_PATH }}/app-releases/stable/${{ matrix.platform-name }}-manifests.json)

          # Combine the new object and the existing array into a new array
          new_array=$(echo "$new_object $existing_array" | jq -s 'add')

          # Update the "releases" key in the root object with the new array
          jq '.releases = '"$new_array" ${{ env.DOWNLOAD_PATH }}/app-releases/stable/${{ matrix.platform-name }}-manifests.json > tmpfile && mv tmpfile ${{ env.DOWNLOAD_PATH }}/app-releases/stable/${{ matrix.platform-name }}-manifests.json

          gcloud storage cp ${{ env.DOWNLOAD_PATH }}/app-releases/stable/${{ matrix.platform-name }}-manifests.json gs://files.jacktrip.org/app-releases/stable
          
