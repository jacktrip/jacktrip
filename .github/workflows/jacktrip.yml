name: build
on:
  push:
    branches:
      - main
      - dev
    tags:
      - '**'
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'documentation/**'
      - 'scripts/**'
      - 'README**'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'documentation/**'
      - 'scripts/**'
      - 'README**'
  workflow_dispatch:
  schedule:
    - cron:  '0 0 * * 0' # run weekly to refresh static Qt cache
jobs:
  build:
    runs-on: ${{ matrix.runs-on }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false # don't abort if one of the build failse
      matrix:
        include:
          - name: Linux-x64-qmake-gcc-static
            release-name: Linux-x64 # specify a separate name for all builds that should be included in releases
            runs-on: ubuntu-18.04
            system-rtaudio: false
            bundled-rtaudio: false # set either system-rtaudio or bundled-rtaudio as true, not both
            nogui: false
            weakjack: false
            # vcpkg-triplet: x64-mingw-static # used when installing rtaudio with vcpkg (Windows)
            # qt-arch: 'win64_msvc2019_64' # specify when using shared (official) qt libraries (Windows)
            static-qt-version: 5.12.11 # if set, it will enable static Qt build
            qt-static-cache-key: 'v25' # required for static qt; update this to force rebuilding static Qt
            jacktrip-path: jacktrip # needed for binary upload
            binary-path: binary # directory relative to build path; triggers artifact upload for jacktrip binary
            # bundle-path: bundle # directory relative to build path; triggers application bundle creation and upload (macOS)
            # installer-path: installer # directory relative to build path; triggers installer creation and upload (macOS, Windows)
            build-system: qmake # qmake, meson, cmake (todo)
            # meson-library-type: shared # shared, static, both
            # static-analysis: true # run clang-tidy static analysis (meson/Linux only)
            
          - name: Linux-x64-qmake-gcc-shared-bundled_rtaudio
            runs-on: ubuntu-20.04
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            weakjack: false
            # jacktrip-path: jacktrip
            # binary-path: binary
            build-system: qmake

          - name: Linux-x64-qmake-gcc-static-nogui
            release-name: Linux-x64-nogui
            runs-on: ubuntu-20.04
            system-rtaudio: false
            bundled-rtaudio: false
            nogui: true
            weakjack: false
            static-qt-version: 5.12.11
            qt-static-cache-key: 'v24' # we use the same key as the main Linux build
            jacktrip-path: jacktrip
            binary-path: binary
            build-system: qmake

          - name: Linux-x64-meson-gcc-shared-bundled_rtaudio
            runs-on: ubuntu-20.04
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            weakjack: false
            # jacktrip-path: jacktrip
            # binary-path: binary
            build-system: meson
            meson-library-type: shared
            static-analysis: true
            
          # - name: Linux-x64-meson-gcc-shared # meson static build doesn't work currently
          #   runs-on: ubuntu-18.04
          #   system-rtaudio: false
          #   bundled-rtaudio: false
          #   nogui: false
          #   weakjack: false
          #   static-qt-version: 5.12.11
          #   qt-static-cache-key: 'v22'
          #   jacktrip-path: jacktrip
          #   binary-path: binary
          #   build-system: meson
          #   meson-library-type: static

          - name: macOS-x64-qmake-clang-static
            release-name: macOS-x64
            runs-on: macos-10.15
            system-rtaudio: true
            bundled-rtaudio: false
            nogui: false
            weakjack: true
            static-qt-version: 5.15.2
            qt-static-cache-key: 'v06'
            jacktrip-path: jacktrip
            # binary-path: binary # don't upload the binary itself since we upload the bundle
            bundle-path: bundle
            installer-path: installer
            build-system: qmake

          - name: macOS-x64-qmake-clang-shared-bundled_rtaudio
            runs-on: macos-10.15
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            weakjack: true
            # jacktrip-path: jacktrip
            # binary-path: binary
            # bundle-path: bundle
            # installer-path: installer
            build-system: qmake

          - name: macOS-x64-meson-clang-shared-bundled_rtaudio
            runs-on: macos-10.15
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            weakjack: true
            # jacktrip-path: jacktrip
            # binary-path: binary
            # bundle-path: bundle
            # installer-path: installer
            build-system: meson
            meson-library-type: both
            
          - name: Windows-x64-qmake-gcc-static-bundled_rtaudio
            release-name: Windows-x64
            runs-on: windows-2019
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            weakjack: true
            vcpkg-triplet: x64-mingw-static
            static-qt-version: 5.15.2
            qt-static-cache-key: 'v06'
            jacktrip-path: release/jacktrip.exe
            binary-path: binary
            installer-path: installer
            build-system: qmake

          - name: Windows-x64-qmake-gcc-shared
            runs-on: windows-2019
            system-rtaudio: true
            bundled-rtaudio: false
            nogui: false
            weakjack: true
            vcpkg-triplet: x64-mingw-dynamic
            qt-arch: 'win64_mingw81'
            qt-cache-key: 'v01'
            # jacktrip-path: release/jacktrip.exe
            # binary-path: binary
            build-system: qmake

          - name: Windows-x64-meson-msvc-shared
            runs-on: windows-2019
            system-rtaudio: true
            bundled-rtaudio: false
            nogui: false
            weakjack: true
            vcpkg-triplet: x64-windows
            qt-arch: 'win64_msvc2019_64'
            qt-cache-key: 'v01'
            # jacktrip-path: jacktrip.exe
            # binary-path: binary
            build-system: meson
            meson-library-type: shared

          - name: Windows-x64-meson-msvc-shared-bundled_rtaudio
            runs-on: windows-2019
            system-rtaudio: false
            bundled-rtaudio: true
            nogui: false
            weakjack: true
            qt-arch: 'win64_msvc2019_64'
            qt-cache-key: 'v01'
            # jacktrip-path: jacktrip.exe
            # binary-path: binary
            build-system: meson
            meson-library-type: both

    env:
      BUILD_PATH: ${{ github.workspace }}/builddir
      QT_VERSION: '5.15.2' # for shared qt installer using install-qt-action
      DEVELOPER_DIR: '/Applications/Xcode_11.7.app/Contents/Developer' # specify XCode version on macOS
      QT_SRC_PATH: ${{ github.workspace }}/../qt-static-src
      QT_STATIC_BUILD_PATH: ${{ github.workspace }}/../qt-static
      QT_STATIC_OPTIONS: '-static -release -optimize-size -no-pch -nomake tools -nomake tests -nomake examples -opensource -confirm-license -skip webengine -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcharts -skip qtdatavis3d -skip qtdoc -skip qtgamepad -skip qtimageformats -skip qtlocation -skip qtmultimedia -skip qtpurchasing -skip qtpurchasing -skip qtremoteobjects -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qttools -skip qtvirtualkeyboard -skip qtwebchannel -skip qtwebengine -skip qtwebglplugin -skip qtwebsockets -skip qtwebview -skip qtxmlpatterns' # common for all platforms
      CLANG_TIDY_NAME: clang-tidy-result
      CLANG_TIDY_PATH: ${{ github.workspace }}/clang-tidy-result
      
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - name: set version string for artifacts
        shell: bash
        id: set-version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::7}
          fi
          if [[ -n "${{ matrix.release-name }}" && "$GITHUB_REF" == refs/tags/* ]]; then
            NAME="${{ matrix.release-name }}"
          else
            NAME="${{ matrix.name }}"
          fi
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=name::$NAME"
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: install dependencies for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install --yes libjack-dev
          if [[ -n "${{ matrix.static-qt-version }}" ]]; then 
            sudo apt-get install --yes libfreetype6-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev libdrm-dev libglu1-mesa-dev libwayland-dev libwayland-egl1-mesa libgles2-mesa-dev libwayland-server0 libwayland-egl-backend-dev libxcb1-dev libxext-dev libfontconfig1-dev libxrender-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-render-util0-dev libxcomposite-dev libgtk-3-dev
          else
            sudo add-apt-repository universe
            sudo apt-get update
            sudo apt-get install --yes qt5-default qt5-qmake qttools5-dev libqt5networkauth5-dev qtdeclarative5-dev libqt5svg5-dev
          fi
          if [[ "${{ matrix.system-rtaudio }}" == true ]]; then 
            sudo apt-get install --yes librtaudio-dev
          fi
          if [[ "${{ matrix.bundled-rtaudio }}" == true ]]; then 
            sudo apt-get install --yes libasound2-dev libpulse-dev
          fi
          if [[ "${{ matrix.build-system }}" == "meson" ]]; then
            sudo apt-get install --yes help2man clang-tidy
            python -m pip install --upgrade pip
            pip install meson ninja pyyaml Jinja2
          fi
      - name: install dependencies for macOS
        if: runner.os == 'macOS'
        env:
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        run: |
          # brew install jack
          # instead of using homebrew, install jack 1.9.16 from the installer, which should provide compatibility with both jackosx and the newer jack2
          curl -L https://github.com/jackaudio/jack2-releases/releases/download/v1.9.16/jack2-macOS-v1.9.16.tar.gz -o jack2.tar.gz
          tar -xf jack2.tar.gz
          sudo installer -pkg jack2-osx-1.9.16.pkg -target /
          if [[ -z "${{ matrix.static-qt-version }}" ]]; then 
            brew install qt5
            brew link qt5 --force
          fi
          if [[ "${{ matrix.system-rtaudio }}" == true ]]; then 
            brew install rt-audio
            rm -f `brew --prefix rt-audio`/lib/*.dylib # remove the shared library, we want static only
          fi
          if [[ -n "${{ matrix.installer-path }}" ]]; then
            brew install packages
          fi
          if [[ "${{ matrix.build-system }}" == "meson" ]]; then
            brew install meson help2man
          fi
      - name: install dependencies for Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install jack --version=1.9.17 --no-progress
          if [[ "${{ matrix.build-system }}" == "qmake" && -n "${{ matrix.static-qt-version }}" && -n "${{ matrix.vcpkg-triplet }}" ]]; then 
            vcpkg install openssl --triplet="${{ matrix.vcpkg-triplet }}"
          fi
          if [[ "${{ matrix.system-rtaudio }}" == true && -n "${{ matrix.vcpkg-triplet }}" ]]; then 
            choco install pkgconfiglite --no-progress
            # check out an older version of rtaudio library, see issue #408
            cd $VCPKG_INSTALLATION_ROOT
            git fetch origin f60125a3a1f527f1bbeeff6ccfdde43634a64235
            git checkout f60125a3a1f527f1bbeeff6ccfdde43634a64235 -- ports/rtaudio
            vcpkg install rtaudio[asio] --triplet="${{ matrix.vcpkg-triplet }}"
            echo "PKG_CONFIG_PATH=$VCPKG_INSTALLATION_ROOT\installed\${{ matrix.vcpkg-triplet }}\lib\pkgconfig" >> $GITHUB_ENV
          fi
          if [[ "${{ matrix.build-system }}" == "meson" ]]; then
            python -m pip install --upgrade pip
            pip install meson ninja
            mv /usr/bin/link.exe /usr/bin/link_disabled # disable gnu linker
          fi
      - name: setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows' && matrix.build-system == 'meson' # MSVC used only by meson
      - name: cache Qt
        id: cache-qt
        if: matrix.qt-arch && !matrix.static-qt-version
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: $${{ runner.os }}-QtCache-${{ env.QT_VERSION }}-${{ matrix.build-system }}_${{matrix.qt-cache-key}}
      - name: install Qt
        uses: jurplel/install-qt-action@v2
        if: runner.os == 'Windows' && !matrix.static-qt-version
        with:
          version: ${{ env.QT_VERSION }}
          arch: ${{ matrix.qt-arch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          modules: 'qtnetworkauth'
      - name: cache static Qt
        id: cache-static-qt
        if: matrix.static-qt-version
        uses: actions/cache@v1
        with:
          path: ${{ env.QT_STATIC_BUILD_PATH }}
          key: ${{ runner.os }}-QtStaticCache-${{ matrix.static-qt-version }}_${{ matrix.qt-static-cache-key }}
      - name: download Qt sources
        if: matrix.static-qt-version && steps.cache-static-qt.outputs.cache-hit != 'true'
        shell: bash
        run: |
          QT_FULL_VERSION=${{ matrix.static-qt-version }}
          QT_MAJOR_MINOR_VERSION=`echo $QT_FULL_VERSION | cut -d '.' -f1-2`
          QT_SRC_URL="https://download.qt.io/official_releases/qt/$QT_MAJOR_MINOR_VERSION/$QT_FULL_VERSION/single/qt-everywhere-src-$QT_FULL_VERSION.tar.xz"
          echo "Downloading Qt source from $QT_SRC_URL"
          curl -L $QT_SRC_URL -o qt.tar.xz
          echo "Unpacking Qt source"
          tar -xf qt.tar.xz
          # move qt to a known location
          mv qt-everywhere* $QT_SRC_PATH
      - name: build static Qt on Linux / macOS
        if: matrix.static-qt-version && steps.cache-static-qt.outputs.cache-hit != 'true' && runner.os != 'Windows'
        run: |
          mkdir $QT_STATIC_BUILD_PATH
          # configure
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            QT_STATIC_OPTIONS="-qt-zlib -qt-libpng -qt-libjpeg -system-freetype -fontconfig -qt-pcre -qt-harfbuzz -no-icu -opengl desktop $QT_STATIC_OPTIONS"
          fi
          "$QT_SRC_PATH/configure" -prefix "$QT_STATIC_BUILD_PATH" $QT_STATIC_OPTIONS
          echo "QT Configure command"
          echo ""$QT_SRC_PATH/configure" -prefix "$QT_STATIC_BUILD_PATH" $QT_STATIC_OPTIONS"
          # build
          echo "building Qt"
          make -j4
          # install
          echo "installing Qt"
          make install
      - name: build static Qt on Windows
        if: matrix.static-qt-version && steps.cache-static-qt.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: cmd
        run: |
          mkdir %QT_STATIC_BUILD_PATH%
          call "%QT_SRC_PATH%/configure.bat" -static-runtime -opengl desktop -platform win32-g++ -prefix "%QT_STATIC_BUILD_PATH%" -openssl -openssl-linked -I "%VCPKG_INSTALLATION_ROOT%\installed\%VCPKG_TRIPLET%\include" -L "%VCPKG_INSTALLATION_ROOT%\installed\%VCPKG_TRIPLET%\lib"  OPENSSL_LIBS="-llibssl -llibcrypto -lcrypt32 -lws2_32" %QT_STATIC_OPTIONS%
          echo "building Qt"
          mingw32-make -j4
          echo "installing Qt"
          mingw32-make install
        env:
          VCPKG_TRIPLET: ${{ matrix.vcpkg-triplet }}
      - name: set Qt environment variables # needed to find qmake depending on the way qt was installed
        shell: bash
        if: matrix.build-system == 'qmake'
        run: |
          if [[ -n "${{ matrix.static-qt-version }}" ]]; then 
            echo "$QT_STATIC_BUILD_PATH/bin" >> $GITHUB_PATH
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "`brew --prefix qt5`/bin" >> $GITHUB_PATH
          else
            echo "$Qt5_DIR/bin" >> $GITHUB_PATH
          fi
      - name: build JackTrip with QMake
        if: matrix.build-system == 'qmake'
        shell: bash
        run: |
          CONFIG_STRING="noclean"
          if [[ -n "${{ matrix.static-qt-version }}" ]]; then 
            CONFIG_STRING="static $CONFIG_STRING"
            export QML_IMPORT_PATH=$QT_STATIC_BUILD_PATH/qml
            export QML2_IMPORT_PATH=$QT_STATIC_BUILD_PATH/qml
          fi
          if [[ "${{ matrix.system-rtaudio }}" == true ]] || [[ "${{ matrix.bundled-rtaudio }}" == true ]]; then 
            CONFIG_STRING="rtaudio $CONFIG_STRING"
          fi
          if [[ "${{ matrix.nojack }}" == true ]]; then 
            CONFIG_STRING="nojack $CONFIG_STRING"
          fi
          if [[ "${{ matrix.nogui }}" == true ]]; then 
            CONFIG_STRING="nogui $CONFIG_STRING"
          fi
          if [[ "${{ matrix.novs }}" == true ]]; then 
            CONFIG_STRING="novs $CONFIG_STRING"
          fi
          if [[ "${{ matrix.weakjack }}" == true ]]; then 
            CONFIG_STRING="weakjack $CONFIG_STRING"
          fi
          ./build $CONFIG_STRING
      - name: build JackTrip with Meson
        if: matrix.build-system == 'meson'
        shell: bash
        run: |
          CONFIG_STRING="-Ddefault_library=${{ matrix.meson-library-type }}"
          if [[ "${{ matrix.system-rtaudio }}" == true ]] || [[ "${{ matrix.bundled-rtaudio }}" == true ]]; then 
            CONFIG_STRING="-Drtaudio=enabled $CONFIG_STRING"
          fi
          if [[ "${{ matrix.bundled-rtaudio }}" == true ]]; then 
            CONFIG_STRING="-Drtaudio:jack=disabled -Drtaudio:default_library=static $CONFIG_STRING"
            if [[ "${{ runner.os }}" == 'Windows' ]]; then 
              CONFIG_STRING="-Drtaudio:wasapi=enabled $CONFIG_STRING"
            fi
          fi
          if [[ "${{ matrix.nojack }}" == true ]]; then 
            CONFIG_STRING="-Djack=disabled $CONFIG_STRING"
          fi
          if [[ "${{ matrix.nogui }}" == true ]]; then 
            CONFIG_STRING="-Dnogui=true $CONFIG_STRING"
          fi
          if [[ "${{ matrix.weakjack }}" == true ]]; then 
            CONFIG_STRING="-Dweakjack=true $CONFIG_STRING"
          fi
          meson --buildtype release $CONFIG_STRING $BUILD_PATH
          cd $BUILD_PATH
          meson compile
      - name: compress the binary
        shell: bash
        if: matrix.binary-path
        run: |
          mkdir -p $BUILD_PATH/${{ matrix.binary-path }}
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            7z a $BUILD_PATH/${{ matrix.binary-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-binary.zip -tzip $BUILD_PATH/${{ matrix.jacktrip-path }} $GITHUB_WORKSPACE/LICENSE.md $GITHUB_WORKSPACE/LICENSES/
          else
            zip -j $BUILD_PATH/${{ matrix.binary-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-binary.zip $BUILD_PATH/${{ matrix.jacktrip-path }}
            cd $GITHUB_WORKSPACE # we need to be in the root project directory for adding licenses
            zip -r $BUILD_PATH/${{ matrix.binary-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-binary.zip LICENSE.md LICENSES
          fi
      - name: create app bundle and installer on macOS
        if: runner.os == 'macOS' && (matrix.bundle-path || matrix.installer-path)
        run: |
          CONFIG=
          if [[ -n "${{ matrix.installer-path }}" ]]; then 
            CONFIG="-i $CONFIG"
          fi
          cd macos
          echo $CONFIG | xargs ./assemble_app.sh
          echo "Assemble complete"
          if [[ -n ${{ matrix.bundle-path }} ]]; then
            mkdir -p $BUILD_PATH/${{ matrix.bundle-path }}
            zip --symlinks -r $BUILD_PATH/${{ matrix.bundle-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-application.zip *.app
            cd $GITHUB_WORKSPACE # we need to be in the root project directory for adding licenses
            zip -r $BUILD_PATH/${{ matrix.bundle-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-application.zip LICENSE.md LICENSES
          fi
          if [[ -n ${{ matrix.installer-path }} ]]; then
            cd $GITHUB_WORKSPACE/macos
            mkdir -p $BUILD_PATH/${{ matrix.installer-path }}
            cp -R package/build/*.pkg $BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.pkg
          fi
      - name: create installer on Windows
        if: runner.os == 'Windows' && matrix.installer-path
        shell: cmd
        run: |
          cd win
          call "build_installer.bat"
          bash -c "mkdir -p $BUILD_PATH/${{ matrix.installer-path }}"
          bash -c "cp deploy/*.msi $BUILD_PATH/${{ matrix.installer-path }}/JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer.msi"
      - name: upload jacktrip binary
        uses: actions/upload-artifact@v2
        if: matrix.binary-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-binary
          path: ${{ env.BUILD_PATH }}/${{ matrix.binary-path }}
      - name: upload application bundle
        uses: actions/upload-artifact@v2
        if: matrix.bundle-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-application
          path: ${{ env.BUILD_PATH }}/${{ matrix.bundle-path }}
      - name: upload installer
        uses: actions/upload-artifact@v2
        if: matrix.installer-path && (!startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/tags/') && matrix.release-name))
        with:
          name: JackTrip-${{ steps.set-version.outputs.version }}-${{ steps.set-version.outputs.name }}-installer
          path: ${{ env.BUILD_PATH }}/${{ matrix.installer-path }}
      - name: analyze build
        if: github.event_name == 'pull_request' && matrix.static-analysis == true
        shell: bash
        run: |
          mkdir $CLANG_TIDY_PATH
          git diff -U0 origin/${{ github.base_ref }} | clang-tidy-diff -p1 -path $BUILD_PATH -export-fixes $CLANG_TIDY_PATH/fixes.yml
      - name: save PR metadata for static analysis
        if: github.event_name == 'pull_request' && matrix.static-analysis == true
        shell: bash
        run: |
          echo ${{ github.event.number }} > $CLANG_TIDY_PATH/pr-id.txt
          echo ${{ github.event.pull_request.head.repo.full_name }} > $CLANG_TIDY_PATH/pr-head-repo.txt
          echo ${{ github.event.pull_request.head.ref }} > $CLANG_TIDY_PATH/pr-head-ref.txt
      - name: upload static analysis
        if: github.event_name == 'pull_request' && matrix.static-analysis == true
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.CLANG_TIDY_NAME }}
          path: ${{ env.CLANG_TIDY_PATH }}/
  # release - list of files uploaded to GH release is specified in the *upload* step
  deploy_gh:
    if: startsWith(github.ref, 'refs/tags/') # run on tagged commits
    needs: build
    runs-on: ubuntu-18.04
    name: 'deploy release'
    env:
      DOWNLOAD_PATH: ${{ github.workspace }}/Install
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.DOWNLOAD_PATH }} # no "name" paramter - download all artifacts
      - name: upload to the release page
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.DOWNLOAD_PATH }}/JackTrip*/*
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
