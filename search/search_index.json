{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to JackTrip","text":"<p>JackTrip is a Linux, macOS, or Windows multi-machine audio system used for network music performance over the Internet. It supports any number of channels (as many as the computer/network can handle) of bidirectional, high quality, uncompressed audio signal streaming.</p> <p>You can use it between any combination of machines e.g., one end using Linux can connect to another using macOS.</p>"},{"location":"#virtual-studio","title":"Virtual Studio","text":"<p>With JackTrip Virtual Studio, you may sing with your chorus, or jam with your band, online without leaving home. With built-in support for live broadcasting, you can share your sessions on JackTrip Radio. Additionally, Virtual Studio allows you to enhance your performances and bring your music to life utilizing Soundscapes digital signal processing. Musicians have creative control with dozens of audio effects with various reverbs, compression, attack and more, in real-time.</p> <p>See why thousands of musicians worldwide use JackTrip to rehearse together, perform together, collaborate together, and laugh together.</p>"},{"location":"#screenshots","title":"Screenshots","text":"Virtual StudioHubclient // BasicHubclient // PluginsHubServer // BasicHubServer // Jitter Buffer"},{"location":"CustomJackServerName/","title":"Using custom JACK server name","text":"<p>In case you want to use JackTrip with JACK server that has non-default name (by default it is <code>default</code>), you need to set <code>JACK_DEFAULT_SERVER</code> environment variable for JackTrip.</p> <ol> <li>Run <code>jackd</code> with <code>--name</code> flag:<code>jackd --name myfancyserver ...</code></li> <li>Run JackTrip with required environment variable set: <code>JACK_DEFAULT_SERVER=myfancyserver jacktrip ...</code></li> </ol> <p>This is useful when you want to isolate multiple JackTrip instances on single machine.</p>"},{"location":"Install/","title":"Installation","text":""},{"location":"Install/#linux","title":"Linux","text":"<p>On Linux the easiest way to install JackTrip is to use the distribution's package manager. However, this may not be the most up-to-date version. For the most recent version, go to the Github releases page below.</p> FedoraDebian/Ubuntu <pre><code>sudo dnf install jacktrip\n</code></pre> <pre><code>sudo apt install jacktrip\n</code></pre>"},{"location":"Install/#latest-release","title":"Latest release","text":"<p>If your distribution doesn't include the latest release in their repository, there are different alternative options to install from.</p> UbuntuDebianAll <p>Ubuntu users can install from a PPA repository maintained by the packager of Ubuntu's official JackTrip packages.</p> <pre><code>sudo add-apt-repository ppa:umlaeute/jacktrip\nsudo apt update\nsudo apt install jacktrip\n</code></pre> <p>Debian stable users can obtain their latest version from the Debian backports repository.</p> <p>As an example for Debian Bullseye follow these steps: </p> <pre><code>mkdir -p /etc/apt/sources.list.d/\necho \"deb http://deb.debian.org/debian bullseye-backports main\" | tee /etc/apt/sources.list.d/backports.list\napt-get update\napt-get install -t bullseye-backports jacktrip\n</code></pre> <p>The GitHub releases page also includes a binary which should run on most Linux distributions (x64). This build is known to not look well under Wayland.</p>"},{"location":"Install/#macos","title":"macOS","text":"<p>macOS installer and application bundle are available on the GitHub releases page. The installer will install the JackTrip app in <code>/Applications</code>, as well as create a link to the <code>jacktrip</code> executable in <code>/usr/local/bin</code> for use in the command line.</p>"},{"location":"Install/#windows","title":"Windows","text":"<p>Windows installer and executable are available on the GitHub releases page. The installer will add a shortcut to your Start menu.</p>"},{"location":"Install/#experimental-builds","title":"Experimental builds","text":"<p>To keep up with the latest changes, including experimental functionality, you can access builds from the <code>dev</code> branch for Linux, macOS and Windows at https://nightly.link/jacktrip/jacktrip/workflows/jacktrip/dev. Please note that macOS binaries are not signed, so you need to right-click and select \"Open\" in order to run them.</p>"},{"location":"Install/#build-from-source","title":"Build from Source","text":"<p>To build JackTrip yourself, follow instructions to compile for Linux, MacOS or Windows.</p>"},{"location":"VirtualStudio/","title":"Virtual Studio","text":"<p>Virtual Studio is the easiest way to get started with JackTrip. By leveraging cloud-based edge computing, realtime video and lossless audio transmits at close to the speed of light, enabling musicians to play and sing together in sync. JackTrip Virtual Studio stands out from other real-time music collaboration technologies with unsurpassed scalability supporting hundreds of musicians in a single session.</p> <p></p>"},{"location":"VirtualStudio/#getting-started","title":"Getting Started","text":"<p>Performing together online is as easy as: 1. Sign up for a free account 2. Start your Virtual Studio 3. Invite your friends and play</p> <p>Click here to start jamming!</p>"},{"location":"VirtualStudio/#learn-more","title":"Learn More","text":"<p>You can find more information about this product on our website.</p>"},{"location":"VirtualStudio/#community","title":"Community","text":"<p>Join other JackTrippers on our community forum.</p>"},{"location":"VirtualStudio/#help","title":"Help","text":"<p>Having difficulties getting set up? Check out our troubleshooting guides or reach out to the team.</p>"},{"location":"About/CHANGELOG/","title":"Changelog","text":""},{"location":"About/CHANGELOG/#271","title":"2.7.1","text":"<ul> <li> <p>(added) Including Visual C++ Redistributable for Windows</p> </li> <li> <p>(fixed) Windows updater sometimes fails to open the download</p> </li> </ul>"},{"location":"About/CHANGELOG/#270","title":"2.7.0","text":"<ul> <li> <p>(added) Audio Bridge Audio Unit for macOS</p> </li> <li> <p>(added) VS Mode ability to share specific screens or windows</p> </li> <li> <p>(updated) VS Mode reduced bandwidth for small video windows</p> </li> <li> <p>(updated) VS Mode enabled disk storage for WebEngine</p> </li> <li> <p>(updated) PLC auto headroom adjustments and bug fixes</p> </li> <li> <p>(updated) Upgraded all builds to use Qt 6.8.3</p> </li> <li> <p>(updated) Audio Bridge VST3 SDK updated to 3.7.13</p> </li> <li> <p>(updated) Use static Qt build when creating VST3 plugin on OSX</p> </li> <li> <p>(updated) Improved filters to blocklist iPhone microphones</p> </li> <li> <p>(fixed) VS Mode potential crash when shutting down</p> </li> <li> <p>(fixed) VS Mode shows too many options for stereo devices</p> </li> <li> <p>(fixed) Potential Audio Bridge deadlocks on Windows</p> </li> <li> <p>(fixed) Potential double delete in volume meters</p> </li> <li> <p>(fixed) Include man page in Linux shared binary zip file</p> </li> </ul>"},{"location":"About/CHANGELOG/#260","title":"2.6.0","text":"<ul> <li> <p>(added) OSC endpoint to get latencies for connected clients</p> </li> <li> <p>(updated) PLC auto headroom allows higher latency when necessary</p> </li> <li> <p>(updated) VS Mode allow any two consecutive channels for input</p> </li> <li> <p>(updated) VS Mode easier audio switching between stereo and mono</p> </li> <li> <p>(updated) VS Mode latency statistics now include jitter buffer</p> </li> <li> <p>(updated) VS Mode improvements to audio quality override settings</p> </li> <li> <p>(updated) VS Mode temporarily disabling feedback detection</p> </li> <li> <p>(fixed) VS Mode kicked out of sessions due to studio change</p> </li> <li> <p>(fixed) VS Mode recognizes changes to server host and port</p> </li> <li> <p>(fixed) VS Mode bugs with reconnecting due to audio changes</p> </li> <li> <p>(fixed) VS Mode strange error message during startup on Linux</p> </li> <li> <p>(fixed) VS Mode empty studio list when starting up</p> </li> <li> <p>(fixed) Ability to build VS Mode using CMake</p> </li> <li> <p>(fixed) Ability to build aarch64 or armv7 on Alpine Linux</p> </li> <li> <p>(fixed) Ability to build using Qt 6.9 release candidates</p> </li> <li> <p>(fixed) Ability to disable the use of libsamplerate</p> </li> <li> <p>(fixed) Ignore timestamps when generating jacktrip.1.gz</p> </li> </ul>"},{"location":"About/CHANGELOG/#251","title":"2.5.1","text":"<ul> <li> <p>(fixed) Updating Qt in Mac builds from 6.2.6 to 6.2.11</p> </li> <li> <p>(fixed) Strange error message during startup on Linux</p> </li> <li> <p>(fixed) VS Mode studio padding when browsing on Linux</p> </li> <li> <p>(fixed) VS Mode ensure studio data is fresh before connecting</p> </li> </ul>"},{"location":"About/CHANGELOG/#250","title":"2.5.0","text":"<ul> <li> <p>(added) New JackTrip Audio Bridge VST3 Plugin</p> </li> <li> <p>(added) Sample rate conversion for audio interfaces</p> </li> <li> <p>(added) Automated arm64 and arm32 builds for Linux</p> </li> <li> <p>(added) Dynamic adjustment of PLC queues using OSC messages</p> </li> <li> <p>(updated) VS Mode remote control for audio quality slider</p> </li> <li> <p>(updated) VS Mode switch to using cookies for authentication</p> </li> <li> <p>(updated) PLC mode improvements in auto headroom calculations</p> </li> <li> <p>(fixed) PLC audio corruption when buffer sizes differ</p> </li> <li> <p>(fixed) PLC broadcast queue length when buffer sizes differ</p> </li> <li> <p>(fixed) Support for multiple commas in --audiodevice parameter</p> </li> <li> <p>(fixed) VS Mode access token expires after running for a day</p> </li> <li> <p>(fixed) VS Mode session feedback dialog closes on navigation</p> </li> <li> <p>(fixed) VS Mode deeplinks broken for first run after install</p> </li> </ul>"},{"location":"About/CHANGELOG/#241","title":"2.4.1","text":"<ul> <li> <p>(fixed) Disabling qWave Quality of Service for Windows users</p> </li> <li> <p>(fixed) PLC occasional popping sound when you first connect</p> </li> <li> <p>(fixed) PLC auto headroom optimization for very low jitter</p> </li> </ul>"},{"location":"About/CHANGELOG/#240","title":"2.4.0","text":"<ul> <li> <p>(addded) qWave Quality of Service for Windows users</p> </li> <li> <p>(addded) VS Mode warning when speakers selected for output</p> </li> <li> <p>(addded) VS Mode dialog when connecting with audio warning</p> </li> <li> <p>(updated) PLC auto headroom tweaks to improve audio quality</p> </li> <li> <p>(updated) Increased UDP timeout from 30 to 50 milliseconds</p> </li> <li> <p>(updated) MIT license for VS mode interface and integration</p> </li> <li> <p>(updated) Removed classic mode from JackTrip Labs builds</p> </li> <li> <p>(updated) ASIO is now only enabled for JackTrip Labs builds</p> </li> <li> <p>(updated) VS Mode now only supports buffer strategy 3 (PLC)</p> </li> <li> <p>(updated) VS Mode removed button click to create first studio</p> </li> <li> <p>(updated) VS Mode updated to use new studio creation interface</p> </li> <li> <p>(updated) VS Mode updated to use new user profile interface</p> </li> <li> <p>(updated) VS Mode changed red text color for buttons to black</p> </li> <li> <p>(updated) VS Mode improved error handling for login screen</p> </li> <li> <p>(updated) VS Mode improved messaging while loading studios</p> </li> <li> <p>(fixed) VS Mode possible failures when loading studios</p> </li> <li> <p>(fixed) VS Mode studio refresh updated to avoid jumpiness</p> </li> <li> <p>(fixed) VS Mode blocklisted iPhone microphone device</p> </li> <li> <p>(fixed) Race condition in automatic patching for JACK</p> </li> <li> <p>(fixed) Missing files in Linux binary zip file</p> </li> </ul>"},{"location":"About/CHANGELOG/#231","title":"2.3.1","text":"<ul> <li> <p>(updated) VS Mode stronger recommendations for audio devices</p> </li> <li> <p>(updated) Reverting OSX builds from Qt 6.2.8 back to 6.2.6</p> </li> <li> <p>(fixed) Crash when JackTrip fails to connect using PLC</p> </li> <li> <p>(fixed) Screen sharing on OSX freezes when window is hidden</p> </li> <li> <p>(fixed) Sanity check for maximum UDP packet size</p> </li> </ul>"},{"location":"About/CHANGELOG/#230","title":"2.3.0","text":"<ul> <li> <p>(added) Static Qt 5.15.13 nogui (CLI) builds for all platforms</p> </li> <li> <p>(added) VS Mode learn more buttons and warning links</p> </li> <li> <p>(updated) Significant PLC performance and quality improvements</p> </li> <li> <p>(updated) Reduced amount of latency added for PLC strategy</p> </li> <li> <p>(updated) Merged PLC buffer strategies (3 is now identical to 4)</p> </li> <li> <p>(updated) Automatically start PLC worker for slower predictions</p> </li> <li> <p>(updated) Builds now use Qt 6.2.8 for OSX and 5.15.13 for Linux</p> </li> <li> <p>(updated) Linux containers now use static builds with Qt 6.5.3</p> </li> <li> <p>(updated) VS Mode help links go to support.jacktrip.com</p> </li> <li> <p>(updated) VS Mode manage button goes to new studio dashboard</p> </li> <li> <p>(fixed) PLC degradation when peer != local buffer sizes</p> </li> <li> <p>(fixed) Port binding on machines that don't support IPv6</p> </li> <li> <p>(fixed) Command line interface debug logging improvements</p> </li> <li> <p>(fixed) VS Mode truncation of invite copied tooltip message</p> </li> </ul>"},{"location":"About/CHANGELOG/#225","title":"2.2.5","text":"<ul> <li> <p>(fixed) VS Mode only admins could join new sessions starting up</p> </li> <li> <p>(fixed) VS Mode only ask for feedback if you've joined a session</p> </li> <li> <p>(updated) VS Mode updates to support self hosted virtual studios</p> </li> </ul>"},{"location":"About/CHANGELOG/#224","title":"2.2.4","text":"<ul> <li> <p>(fixed) Allow software opengl for older windows video drivers</p> </li> <li> <p>(fixed) VS Mode avoid unnecessary JACK library checks at startup</p> </li> </ul>"},{"location":"About/CHANGELOG/#223","title":"2.2.3","text":"<ul> <li> <p>(added) New container images for JackTrip hub server</p> </li> <li> <p>(fixed) Support for audio interfaces on OSX with multiple channels</p> </li> <li> <p>(fixed) Hub server crashes when trying to rebind ports</p> </li> <li> <p>(fixed) VS Mode blocklisted Generic Low Latency ASIO Driver</p> </li> <li> <p>(fixed) VS Mode inconsistent initial connection state</p> </li> </ul>"},{"location":"About/CHANGELOG/#222","title":"2.2.2","text":"<ul> <li> <p>(updated) VS Mode updated network connection thresholds</p> </li> <li> <p>(updated) VS Mode improved sample rate flexibility for Windows</p> </li> <li> <p>(fixed) VS Mode inconsistent deep link handling on Windows</p> </li> <li> <p>(fixed) Throttle console errors for UDP waiting too long</p> </li> </ul>"},{"location":"About/CHANGELOG/#221","title":"2.2.1","text":"<ul> <li>(fixed) Sample rate issues with certain Windows ASIO drivers</li> </ul>"},{"location":"About/CHANGELOG/#220","title":"2.2.0","text":"<ul> <li> <p>(updated) Improved support for different input and output devices</p> </li> <li> <p>(updated) Various latency improvements for packet loss concealment</p> </li> <li> <p>(updated) VS Mode make it easier to dismiss the user feedback dialog</p> </li> <li> <p>(updated) VS Mode error message for disconnected audio interfaces</p> </li> <li> <p>(fixed) VS Mode broken deeplinks when studio doesn't match filters</p> </li> <li> <p>(fixed) VS Mode refused to connect to studios not 48khz</p> </li> <li> <p>(fixed) VS Mode showed wrong devices selected when connected</p> </li> </ul>"},{"location":"About/CHANGELOG/#210","title":"2.1.0","text":"<ul> <li> <p>(added) VS Mode ability to create studios without a web browser</p> </li> <li> <p>(added) VS Mode improved network stability notifications</p> </li> <li> <p>(added) VS Mode dialog when QML plugins are missing</p> </li> <li> <p>(updated) VS Mode video improvements on Windows</p> </li> <li> <p>(updated) Packet loss concealment latency and quality improvements</p> </li> <li> <p>(fixed) Packet loss concealment glitches when buffer sizes don't match</p> </li> <li> <p>(fixed) VS Mode ensure that the app is disconnected at startup</p> </li> <li> <p>(fixed) Invalid escape sequence in Linux desktop file</p> </li> <li> <p>(fixed) VS Mode unable to change update channel</p> </li> </ul>"},{"location":"About/CHANGELOG/#202","title":"2.0.2","text":"<ul> <li> <p>(added) VS Mode latency categories for Linux audio devices</p> </li> <li> <p>(added) VS Mode audio warnings for high latency Linux devices</p> </li> <li> <p>(updated) Improved support for Pipewire latency on Linux</p> </li> <li> <p>(fixed) Crash on Windows when using the JACK audio backend</p> </li> <li> <p>(fixed) Include ALSA support for Linux builds using meson</p> </li> <li> <p>(fixed) VS Mode overlapping UI elements with max scaling</p> </li> <li> <p>(fixed) Don't require git to be present for meson builds</p> </li> <li> <p>(fixed) Linux man page description and meson build errors</p> </li> </ul>"},{"location":"About/CHANGELOG/#201","title":"2.0.1","text":"<ul> <li> <p>(fixed) VS Mode Mix to Mono setting was sending a buzzing noise</p> </li> <li> <p>(fixed) VS Mode Logout followed by Login was breaking network stats</p> </li> <li> <p>(fixed) Device names with special characters work again</p> </li> </ul>"},{"location":"About/CHANGELOG/#200","title":"2.0.0","text":"<ul> <li> <p>(added) VS Mode integrated video and other UI updates</p> </li> <li> <p>(added) VS support for refreshing devices while connected to studio</p> </li> <li> <p>(added) VS feedback survey request after leaving studios</p> </li> <li> <p>(added) VS Mode improved warnings for high latency audio devices</p> </li> <li> <p>(added) VS Mode improved getting started recommendations</p> </li> <li> <p>(updated) official builds now use Qt 6 and RtAudio 6</p> </li> <li> <p>(updated) official Windows builds now use schannel and MSVC</p> </li> <li> <p>(updated) Simple-FFT dependency copied into source tree</p> </li> <li> <p>(updated) Improved user experience when using the RtAudio backend</p> </li> <li> <p>(fixed) Crashes when audio interfaces don't support buffer size</p> </li> <li> <p>(fixed) Crashes when audio interfaces are unplugged while active</p> </li> <li> <p>(fixed) Blocklisting Steinberg Generic ASIO driver due to crashes</p> </li> <li> <p>(fixed) Bugs with Virtual Studio deep links and connections stats</p> </li> <li> <p>(fixed) VS Settings will now revert back when Cancel is selected</p> </li> <li> <p>(fixed) VS Mode device levels no longer reset on first registration</p> </li> </ul>"},{"location":"About/CHANGELOG/#1101","title":"1.10.1","text":"<ul> <li>(fixed) VS Mode crashes involving ASIO device selection</li> </ul>"},{"location":"About/CHANGELOG/#1100","title":"1.10.0","text":"<ul> <li> <p>(added) VS Mode automatically mute when feedback is detected</p> </li> <li> <p>(added) VS Mode - notify people of network outages</p> </li> <li> <p>(updated) PLC optimizations for slower hardware devices</p> </li> <li> <p>(updated) VS Mode volume meter performance improvements</p> </li> <li> <p>(updated) VS Mode login no longer listens on a local port</p> </li> <li> <p>(updated) VS Mode improved clarity of startup messages</p> </li> <li> <p>(fixed) Windows crash caused by Realtek ASIO driver</p> </li> <li> <p>(fixed) More friendly message for Windows Terminal bug</p> </li> <li> <p>(fixed) Faster startup by reducing and deferring audio interface scans</p> </li> <li> <p>(fixed) Switching from VS to Classic mode leaves audio open</p> </li> </ul>"},{"location":"About/CHANGELOG/#190","title":"1.9.0","text":"<ul> <li> <p>(added) buffer strategy 4 to run PLC in audio callback</p> </li> <li> <p>(added) VS Mode - change audio devices while connected</p> </li> <li> <p>(added) universal binary for macOS</p> </li> <li> <p>(added) tooltips, sliders, and positioning of connected interface</p> </li> <li> <p>(added) emails for vulnerability reporting</p> </li> <li> <p>(added) local monitoring</p> </li> <li> <p>(added) VS mode - Error message when single studio limit reached</p> </li> <li> <p>(updated) regulator thread uses real-time priority</p> </li> <li> <p>(updated) VS mode - use buffer strategy 4</p> </li> <li> <p>(updated) VS mode - Default to PLC</p> </li> <li> <p>(updated) VS Mode - PLC auto queue has 5ms headroom</p> </li> <li> <p>(updated) Enforcing using the same ASIO device on Windows</p> </li> <li> <p>(updated) VS Mode - JTL builds hide the yes/no screen on first launch</p> </li> <li> <p>(updated) GHA - wait for static Qt builds rather than failing</p> </li> <li> <p>(updated) VS Mode - \"all devices\" is now \"high latency\"</p> </li> <li> <p>(updated) VS Mode - Warning text for non-ASIO Windows devices</p> </li> <li> <p>(updated) Faust-generate code moved out of headers</p> </li> <li> <p>(fixed) PLC bugs</p> </li> <li> <p>(fixed) VS Mode - changing devices while connected refreshes device lists</p> </li> <li> <p>(fixed) play test tone on Linux</p> </li> <li> <p>(fixed) static openssl on Linux</p> </li> </ul>"},{"location":"About/CHANGELOG/#181","title":"1.8.1","text":"<ul> <li> <p>(added) VS mode - tooltips to explain input and output device</p> </li> <li> <p>(added) buffer size and sample rate now settable with Pipewire</p> </li> <li> <p>(added) VS mode - link to create a studio on the login complete page</p> </li> <li> <p>(fixed) Device names with special characters work again</p> </li> <li> <p>(fixed) undefine boolean error</p> </li> <li> <p>(fixed) VS Mode - Audio settings correctly show the selected device</p> </li> <li> <p>(fixed) VS Mode - Refresh button doesn't crash Windows any more</p> </li> <li> <p>(fixed) VS Mode - Output channel selections save correctly</p> </li> <li> <p>(updated) documentation styling</p> </li> <li> <p>(updated) removed ipify from VS mode</p> </li> <li> <p>(updated) ip check can now function with only IPv6</p> </li> <li> <p>(updated) cleaned up vsinit class</p> </li> </ul>"},{"location":"About/CHANGELOG/#180","title":"1.8.0","text":"<ul> <li> <p>(added) Qt version option for Meson builds</p> </li> <li> <p>(added) GHA builds now include static preview docs</p> </li> <li> <p>(added) when using the classic GUI, command line options are now parsed</p> </li> <li> <p>(added) VS mode - Selecting and configuring device channels</p> </li> <li> <p>(added) Classic mode - Warning for machines without JACK installed</p> </li> <li> <p>(added) VS mode - high latency warning for non-ASIO devices</p> </li> <li> <p>(added) Meson build without rtaudio in GHA</p> </li> <li> <p>(updated) icons in VS mode</p> </li> <li> <p>(updated) Linux builds now use Qt 5.15.8</p> </li> <li> <p>(updated) Replaced QVector in meter code</p> </li> <li> <p>(updated) Removed set-output from GHA scripts for deprecation</p> </li> <li> <p>(updated) Automated the auto-updater release process</p> </li> <li> <p>(updated) RtAudio is included in Linux binary releases</p> </li> <li> <p>(updated) text on audio setup confirm button when using deeplink</p> </li> <li> <p>(updated) VS Mode - improved first-time signin</p> </li> <li> <p>(updated) Flathub - improve latency by defaulting to 256 samples buffer size</p> </li> <li> <p>(fixed) ambiguous call to overloaded function in Qt6</p> </li> <li> <p>(fixed) issue where selected devices were not the devices used for output</p> </li> <li> <p>(fixed) crash when using Classic mode and CLI w/ JACK</p> </li> <li> <p>(fixed) ipify issue with Norton</p> </li> <li> <p>(fixed) compiler warnings when building without RtAudio</p> </li> <li> <p>(fixed) VS Mode - refresh button behavior on settings page</p> </li> </ul>"},{"location":"About/CHANGELOG/#171","title":"1.7.1","text":"<ul> <li> <p>(added) missing QuickControl2 dependency</p> </li> <li> <p>(added) documentation preview in build steps</p> </li> <li> <p>(added) README text about PPA and Debian backports</p> </li> <li> <p>(updated) upgraded to Qt 5.15.3</p> </li> <li> <p>(updated) linux package dependencies</p> </li> <li> <p>(updated) JackTrip now uses a random available port when connecting</p> </li> <li> <p>(updated) VS mode - Audio settings screen layouts</p> </li> <li> <p>(fixed) VS mode - video button is now available to all users of a Studio</p> </li> <li> <p>(fixed) A few memory leaks</p> </li> <li> <p>(fixed) linux static builds</p> </li> </ul>"},{"location":"About/CHANGELOG/#170","title":"1.7.0","text":"<ul> <li> <p>(added) VS Mode - Start and join inactive studios</p> </li> <li> <p>(added) JackTrip now prints build info on running from console</p> </li> <li> <p>(added) VS Mode - supports changing output volume from the server</p> </li> <li> <p>(added) VS Mode - Link to video on VS web when connected</p> </li> <li> <p>(updated) signing now happens in the main build workflow</p> </li> <li> <p>(updated) VS mode sorts active studios above inactive studios</p> </li> <li> <p>(updated) cmake build</p> </li> <li> <p>(updated) meson builds will fail if no backend is enabled</p> </li> <li> <p>(updated) replaced many ifdefs with if constexpr</p> </li> <li> <p>(updated) After signing out of VS mode, you will be asked to sign back in on the web</p> </li> <li> <p>(fixed) network stats failing after studio start</p> </li> <li> <p>(fixed) occasional immediate disconnects</p> </li> <li> <p>(fixed) segfault issue due to ifdefs</p> </li> <li> <p>(fixed) Hanging UI on Windows</p> </li> <li> <p>(fixed) turned a comment warning into an appropriate error</p> </li> <li> <p>(fixed) VS Mode - Join issue withs studios started in app</p> </li> <li> <p>(fixed) hanging app after refreshing studios</p> </li> <li> <p>(fixed) VS Mode - TCP 19 error after starting a studio</p> </li> </ul>"},{"location":"About/CHANGELOG/#168","title":"1.6.8","text":"<ul> <li> <p>(fixed) broken \"Yes\" button on launch</p> </li> <li> <p>(fixed) window resizing issues</p> </li> <li> <p>(fixed) subscribed studios showing up under Public in VS mode</p> </li> </ul>"},{"location":"About/CHANGELOG/#167","title":"1.6.7","text":"<ul> <li> <p>(added) volume meters in classic mode</p> </li> <li> <p>(added) release-acquire ordering for Regular</p> </li> <li> <p>(added) audio driver support article in VS mode</p> </li> <li> <p>(added) regulatorthread</p> </li> <li> <p>(added) studios page first time UI</p> </li> <li> <p>(added) non-asio audio devices can be used on windows</p> </li> <li> <p>(updated) dependency list in documentation</p> </li> <li> <p>(updated) windows opens jacktrip after install</p> </li> <li> <p>(updated) Move to overlapped I/O for Windows Networking</p> </li> <li> <p>(updated) New default device behavior in Virtual Studio mode</p> </li> <li> <p>(fixed) opening links from Virtual Studio</p> </li> <li> <p>(fixed) send capture volume as int</p> </li> <li> <p>(fixed) connection issues for servers without reverse dns</p> </li> <li> <p>(fixed) flatpak build errors</p> </li> <li> <p>(fixed) ventura updater crash</p> </li> <li> <p>(fixed) uninitialized delete issue</p> </li> <li> <p>(remvoed) extraneous call to readSlotNonBlocking</p> </li> </ul>"},{"location":"About/CHANGELOG/#166","title":"1.6.6","text":"<ul> <li> <p>(fixed) Notarization scripts for macOS</p> </li> <li> <p>Note - this version replaces 1.6.5, as that release was mistakenly deleted</p> </li> </ul>"},{"location":"About/CHANGELOG/#165","title":"1.6.5","text":"<ul> <li> <p>(added) Input/output volume control and input mute in VS</p> </li> <li> <p>(added) Volume plugin</p> </li> <li> <p>(added) Linux manifests used for download links</p> </li> <li> <p>(added) VS Test mode for jacktrip.org users</p> </li> <li> <p>(added) Qt6 support for NO_VS builds</p> </li> <li> <p>(added) Show Qt version in About dialog</p> </li> <li> <p>(updated) VS - makes inactive, admin'd studios visible by default</p> </li> <li> <p>(updated) using -q auto3 for buffer length with plc</p> </li> <li> <p>(updated) updated notarization process to use notarytool</p> </li> <li> <p>(updated) link to Qt source as it has changed</p> </li> <li> <p>(updated) Classic GUI reverts some pre-VS changes</p> </li> <li> <p>(updated) QMake build scripts more in line with documentation</p> </li> <li> <p>(fixed) new user screen in VS mode</p> </li> <li> <p>(fixed) logout freezing jacktrip</p> </li> <li> <p>(fixed) NO_VS builds work without setting NO_UPDATER</p> </li> <li> <p>(fixed) volume meter-related crash</p> </li> </ul>"},{"location":"About/CHANGELOG/#164","title":"1.6.4","text":"<ul> <li> <p>(added) Volume meters when connected to a Studio in VS mode</p> </li> <li> <p>(added) Validation of Linux desktop file in build steps</p> </li> <li> <p>(added) a copy invite link button to VS mode Studios</p> </li> <li> <p>(added) an advanced setting for buffer strategy in VS mode</p> </li> <li> <p>(updated) PLC workers now zero out the last good packet from stalled clients</p> </li> <li> <p>(updated) PLC distinguish stuck clients</p> </li> <li> <p>(updated) Fedora meson dependencies</p> </li> <li> <p>(fixed) UI is usable when Studio list in empty in VS mode</p> </li> <li> <p>(fixed) Crashing when unplugging a device while connected and using JACK</p> </li> <li> <p>(fixed) Launching from URL skipped setup</p> </li> <li> <p>(fixed) UI hanging when connecting to Studios in VS mode</p> </li> <li> <p>(fixed) \"Refresh list\" button disabling ui interaction in VS mode</p> </li> <li> <p>(fixed) Network stats not displaying on first connect after login (VS mode)</p> </li> <li> <p>(fixed) VS mode won't join studios when on warning or device setup screens</p> </li> </ul>"},{"location":"About/CHANGELOG/#163","title":"1.6.3","text":"<ul> <li> <p>(fixed) Segfault when creating a hub server via cmd line</p> </li> <li> <p>(fixed) Linux desktop file is no longer invalid</p> </li> <li> <p>(fixed) Command line arguments no longer print to console</p> </li> </ul>"},{"location":"About/CHANGELOG/#162","title":"1.6.2","text":"<ul> <li> <p>(updated) Static Qt version for Linux builds</p> </li> <li> <p>(updated) cleaner, easier to read VS settings</p> </li> <li> <p>(updated) icons for 'Manage' and 'Settings' in VS mode</p> </li> <li> <p>(added) human-readable locations in VS mode</p> </li> <li> <p>(added) warning that cmake is not officially supported</p> </li> <li> <p>(added) VS mode is treated as a device by VS web</p> </li> <li> <p>(added) Network statistics in Virtual Studio mode</p> </li> <li> <p>(added) URL scheme support to join a Studio from the VS web join button</p> </li> <li> <p>(added) banner images on Studios in VS mode</p> </li> <li> <p>(added) VS mode sets remote client name to app ID</p> </li> <li> <p>(fixed) WebSocket connection behavior in Virtual Studio (VS) mode</p> </li> <li> <p>(fixed) dblsqd errors in Linux builds</p> </li> <li> <p>(fixed) Windows datagramAvailable error</p> </li> <li> <p>(fixed) High Sierra compatibility in static builds</p> </li> <li> <p>(fixed) Doesn't crash if RtAudio sample rate isn't supported</p> </li> <li> <p>(fixed) Fractional UI scaling on Windows</p> </li> </ul>"},{"location":"About/CHANGELOG/#161","title":"1.6.1","text":"<ul> <li> <p>(added) ToS IP header to use DSCP Expedited Forwarding</p> </li> <li> <p>(fixed) Ubuntu deoendencies</p> </li> <li> <p>(fixed) timeout of client restored</p> </li> <li> <p>(fixed) bufstrategy 3 history minimum</p> </li> <li> <p>(fixed) perpetual logging in screen</p> </li> </ul>"},{"location":"About/CHANGELOG/#160","title":"1.6.0","text":"<ul> <li> <p>(added) Virtual Studio integration; previous GUI is now called \"Classic Mode\"</p> </li> <li> <p>(added) dblsqd for auto-updates</p> </li> <li> <p>(updated) buffer strategy 3 - multiple updates and fixes, still experimental</p> </li> <li> <p>(added) JackTrip Labs signing scripts</p> </li> <li> <p>(fixed) OpenSSL in the build script</p> </li> <li> <p>(updated) code cleanup and maintenance</p> </li> </ul>"},{"location":"About/CHANGELOG/#153","title":"1.5.3","text":"<ul> <li> <p>(added) linux instructions for parallel versions</p> </li> <li> <p>(added) docs on running JackTrip with a named JACK server</p> </li> <li> <p>(added) nogui linux release build</p> </li> <li> <p>(update) Auto mode for buffer strategy 3</p> </li> <li> <p>(update) remove extra macOS binary release artifact</p> </li> <li> <p>(fixed) Don't link nogui qmake build with gui libraries</p> </li> </ul>"},{"location":"About/CHANGELOG/#152","title":"1.5.2","text":"<ul> <li> <p>(update) RingBuffer replaced by Regulator for experimental buffer strategy 3</p> </li> <li> <p>(update) call out old jacktrip versions in package repos on Debian and others</p> </li> <li> <p>(update) first attempt to support BSDs (especially FreeBSD)</p> </li> <li> <p>(update) add signing to macOS packaging script</p> </li> <li> <p>(update) Rename MANUAL_POLL TO MANUAL_POLL</p> </li> <li> <p>(update) RtAudio warning changes</p> </li> <li> <p>(update) Use bundled rtaudio for Windows release builds</p> </li> <li> <p>(update) Incorporate meson build in the main GHA file</p> </li> <li> <p>(fixed) build script doesn't exit if build fails</p> </li> <li> <p>(fixed) false error message for JACK 1.9.20 on M1 builds</p> </li> <li> <p>(fixed) Don't connect our UDP socket</p> </li> <li> <p>(fixed) Fix GUI command line warning</p> </li> <li> <p>(fixed) Limiter allocation in GUI</p> </li> </ul>"},{"location":"About/CHANGELOG/#151","title":"1.5.1","text":"<ul> <li> <p>(added) option to include the server in the patching for client fan out/in and full mix modes</p> </li> <li> <p>(added) clang-tidy and clang-format CI checks</p> </li> <li> <p>(update) [Meson] only add weakjack include directory when enabled</p> </li> <li> <p>(update) remove reserved macro identifiers // use predefined macros</p> </li> <li> <p>(update) remove 'using namespace std' and add clang-tidy check</p> </li> <li> <p>(fixed) nearly all clazy warnings level 2 fixed</p> </li> <li> <p>(fixed) missing Windows startmenu icon</p> </li> <li> <p>(fixed) missing initializer for PROCESSENTRY32 type (Windows)</p> </li> </ul>"},{"location":"About/CHANGELOG/#150","title":"1.5.0","text":"<ul> <li>(added) option to upmix mono clients to stereo in hub server mode patching</li> </ul>"},{"location":"About/CHANGELOG/#143","title":"1.4.3","text":"<ul> <li> <p>Generating changelog from YAML file for MkDocs and Flatpaks by @ntonnaett in #442</p> </li> <li> <p>Update jacktrip_globals.h by @cchafe in #443</p> </li> </ul>"},{"location":"About/CHANGELOG/#142","title":"1.4.2","text":"<ul> <li> <p>[Meson] Set RtAudio subproject to version 5.2.0 by @ntonnaett in #436</p> </li> <li> <p>Verbose mode in GUI by @psiborg112 in #434</p> </li> <li> <p>Help screen for app bundle script by @psiborg112 in #439</p> </li> <li> <p>[GHA] Fix weekly cron job entry by @ntonnaett in #441</p> </li> </ul>"},{"location":"About/CHANGELOG/#141","title":"1.4.1","text":"<ul> <li>Fix for OSX installer failures by @mikedickey in #431</li> </ul>"},{"location":"About/CHANGELOG/#140","title":"1.4.0","text":"<ul> <li> <p>(added) optional GUI from QJackTrip</p> </li> <li> <p>(added) authentication in hub server mode</p> </li> <li> <p>(added) different number of sending and receiving channels</p> </li> <li> <p>(added) append thread IDs to jack client names</p> </li> <li> <p>(added) new patcher mechanism that doesn't delete existing connections</p> </li> <li> <p>(added) MkDocs based documentation</p> </li> <li> <p>(added) weak jack linking</p> </li> <li> <p>(added) manpage</p> </li> <li> <p>(added) MSVC build</p> </li> <li> <p>(added) RtAudio Meson subproject</p> </li> <li> <p>(added) formatting with clang-format</p> </li> <li> <p>(added) static analysis with clang-tidy</p> </li> <li> <p>(added) cross compilation for Windows</p> </li> <li> <p>(added) flatpaks</p> </li> <li> <p>(added) appstream</p> </li> <li> <p>(added) automated builds and deployment for Linux, macOS and Windows</p> </li> <li> <p>(added) macOS and Windows Installers</p> </li> <li> <p>(fixed) regression in remote client name handling</p> </li> <li> <p>(fixed) long jack client names (&gt; 27 characters) in 1.9.11</p> </li> <li> <p>(fixed) Hardcode Derived Class Names of ProcessPlugins to prevent undefined behavior</p> </li> <li> <p>(update) QJackTrip and JackTrip are now identical</p> </li> <li> <p>(update) Change helpscreen wording for --broadcast argument</p> </li> <li> <p>(update) jitter buffer alternatives</p> </li> <li> <p>(update) RtAudio revive</p> </li> <li> <p>(update) RtAudio device selection</p> </li> <li> <p>(update) build script moved to root directory</p> </li> </ul>"},{"location":"About/CHANGELOG/#130","title":"1.3.0","text":"<ul> <li> <p>(added) async networking in hub listener</p> </li> <li> <p>(added) limiter, compressor, reverb</p> </li> <li> <p>(added) examine audio delay</p> </li> <li> <p>(added) jitter buffer alternatives</p> </li> <li> <p>(added) broadcast output ports</p> </li> <li> <p>(added) PREFIX variable for installation path</p> </li> <li> <p>(added) disconnect on timeout</p> </li> <li> <p>(added) SIGTERM</p> </li> <li> <p>(added) simulate packet loss, jitter</p> </li> <li> <p>(added) hubpatch 5, no auto patching</p> </li> <li> <p>(added) jack client name length check</p> </li> <li> <p>(added) scripts/hubMode/test_hub_mode_server_and_client.sh</p> </li> <li> <p>(added) Meson build</p> </li> <li> <p>(fixed) misc. typos, indentation</p> </li> <li> <p>(fixed) short form IO stat options</p> </li> <li> <p>(fixed) nullptr jack server name when creating jack client</p> </li> <li> <p>(fixed) stop ring buffer blocking when jack has been stopped</p> </li> <li> <p>(fixed) JMess handling of non-western characters</p> </li> <li> <p>(fixed) closing curly brace on mJackTrip client creation</p> </li> <li> <p>(fixed) Warnings</p> </li> <li> <p>(fixed) remove rtaudio device and mpeeraddress msgs.</p> </li> <li> <p>(fixed) signal and slot connections</p> </li> <li> <p>(fixed) incorrect dependency from jacktrip_main</p> </li> <li> <p>(update) RT thread priority for network I/O</p> </li> <li> <p>(update) clipping to saturation</p> </li> <li> <p>(update) build instructions</p> </li> </ul>"},{"location":"About/CHANGELOG/#122","title":"1.2.2","text":"<ul> <li> <p>(added) bindPort range to reject oddball connections</p> </li> <li> <p>(fixed) jack client name strings</p> </li> </ul>"},{"location":"About/CHANGELOG/#121","title":"1.2.1","text":"<ul> <li> <p>(added) src/build script builds in ../builddir</p> </li> <li> <p>(fixed) refactor \"Master\" to be \"Hub\"</p> </li> <li> <p>(fixed) 1.2.1 correctly Versioned and tagged</p> </li> </ul>"},{"location":"About/CHANGELOG/#12","title":"1.2","text":"<ul> <li> <p>(added) jack patching modes (-p) for Hub Mode server (-S)</p> </li> <li> <p>(fixed) Compilation under ubuntu</p> </li> <li> <p>(removed) setRealtimeProcessPriority()</p> </li> <li> <p>(removed) Rtaudio mode (but still has dependencies)</p> </li> <li> <p>(fixed) IPv4-mapped IPv6 addressing bug</p> </li> <li> <p>...</p> </li> <li> <p>(fixed) Fixed compilation for  MacOSX10.11.sdk.</p> </li> <li> <p>(update) Updated to RtAudio 4.1.1, and using shared lib in linux.</p> </li> </ul>"},{"location":"About/CHANGELOG/#11","title":"1.1","text":"<ul> <li> <p>(added) Support for RtAudio. Jacktrip can now be used without Jack</p> </li> <li> <p>(added) DNS Look-up support, now one machine can have a private IP (but still needs to have UDP ports open)</p> </li> <li> <p>(added) New port to Windows XP and Windows Vista (experimental and not tested for a long time, only when using jacktrip as a library)</p> </li> <li> <p>(added) Multiclient Server (experimental and not exposed in the executable)</p> </li> </ul>"},{"location":"About/CHANGELOG/#105","title":"1.0.5","text":"<ul> <li> <p>(added) Compatibility with JamLink boxes (restricted at the moment to 48KHz, 64 buffer size and 1 channel)</p> </li> <li> <p>(added) New port structure that allows the communication between a public server and a local client</p> </li> <li> <p>(added) Option for packets without header</p> </li> <li> <p>(added) Option to change default client name</p> </li> <li> <p>(fixed) General optimizations and code cleanup</p> </li> <li> <p>(added) Improved, now cross-platform build script</p> </li> </ul>"},{"location":"About/CHANGELOG/#104","title":"1.0.4","text":"<ul> <li>(fixed) Buss error caused when no physical inputs or outputs ports are available</li> </ul>"},{"location":"About/CHANGELOG/#103","title":"1.0.3","text":"<ul> <li> <p>(added) Redundancy Algorithm for UDP Packets to avoid glitches with packet losses</p> </li> <li> <p>(fixed) Now compiles on 64bits machines</p> </li> <li> <p>(fixed) Improved exceptions handling</p> </li> <li> <p>(added) Basic Karplus-Strong model added as Plug-in</p> </li> <li> <p>(added) Some functionality reimplemented using signals and slots for more flexibility</p> </li> <li> <p>(added) Multiple-Client-Server in alpha testing, expect it working in the next release</p> </li> </ul>"},{"location":"About/CHANGELOG/#102-development","title":"1.0.2 (Development)","text":"<ul> <li> <p>(added) Port offset mode, to use a different UDP port than the default one.</p> </li> <li> <p>(fixed) Improved thread behavior</p> </li> </ul>"},{"location":"About/CHANGELOG/#101-development","title":"1.0.1 (Development)","text":"<ul> <li> <p>(added) jamlink mode to connect with jamlink boxes</p> </li> <li> <p>(fixed) thread priority in both Linux and Mac OS X (still need some work on the Mac OS X Version)</p> </li> <li> <p>(fixed) Bug that was causing plug-ins not to behave correctly</p> </li> <li> <p>(added) Loopback mode</p> </li> <li> <p>(added) Underrun Modes: Wavetable (default) and set to zeros</p> </li> <li> <p>(added) Check for peer audio settings, program exists if they don't match</p> </li> <li> <p>(added) Automatically connect ports to available physical audio interface.</p> </li> </ul>"},{"location":"About/CHANGELOG/#10-development","title":"1.0 (Development)","text":"<ul> <li>initial release</li> </ul>"},{"location":"About/Contributors/","title":"Contributors","text":"<p>In order of first contribution</p>"},{"location":"About/Contributors/#2008","title":"2008","text":"Chris Chafe /// CCRMA, Stanford University /// JackTrip Foundation <p>**2008 - **</p> Juan-Pablo Caceres /// CCRMA, Stanford University <p>2008 - 2018</p>"},{"location":"About/Contributors/#2019","title":"2019","text":"Nils Tonn\u00e4tt /// Audiocommunication, TU Berlin <p>**2019 - **</p> <p>Feature Work</p> <ul> <li>Different number of input and output channels</li> <li>Append Thread ID to JACK client names</li> <li>Meson build</li> <li>RtAudio backend</li> <li>MkDocs based documentation</li> <li>Github Actions</li> </ul>"},{"location":"About/Contributors/#2020","title":"2020","text":"Aaron Wyatt /// Monash University <p>**2020 - **</p> <p>Feature Work</p> <ul> <li>Graphical User Interface (QJackTrip)</li> <li>IPv6 support</li> <li>Authentication</li> <li>Installer Creation Scripts</li> </ul> Marcin P\u0105czkowski /// Composer <p>**2020 - **</p> <p>Feature Work</p> <ul> <li>Github Actions</li> </ul>"},{"location":"About/Contributors/#2021","title":"2021","text":"Olivier Humbert <p>2021</p> <ul> <li>French Translation Work</li> </ul>"},{"location":"About/Contributors/#unknown","title":"unknown","text":"Julius Smith /// CCRMA, Stanford University Bonnie Kwong Mike Dickey /// JackTrip Foundation Anton Runov Maximilian Wagenbach Spencer Salazar Omar Costa Hamido Bruno Ruviaro Daniel Riechers Jasper Mackenzie Michael Dessen Gerald Mwangi James Borden Nicolas Kaiser Noah Horn Tom Ward Ronen Barzel"},{"location":"About/License/","title":"JackTrip License","text":"<p>Copyright \u00a9 2008-2024 Juan-Pablo Caceres, Chris Chafe, et al. SoundWIRE group at CCRMA, Stanford University.</p> <p>Virtual Studio interface and integration, Copyright \u00a9 2022-2024 JackTrip Labs, Inc.</p> <p>Classic mode graphical user interface originally released as QJackTrip, Copyright \u00a9 2020 Aaron Wyatt</p> <p>The JackTrip project including Virtual Studio interface and integration is open source distributed under the MIT license. The Classic mode graphical interface is open source distributed under a GPL license.</p> <p>JackTrip uses the Qt library. Qt's source code can be downloaded from https://download.qt.io/official_releases/qt/.</p> <p>Unsigned builds provided on GitHub's Releases page include the Classic mode graphical interface and use an open source distribution of Qt. These are distributed under a GPL license.</p> <p>Signed builds for Windows and Mac provided by JackTrip Labs do not include the Classic mode graphical interface and use a commercial Qt license. These are distributed under a MIT license.</p> <p>Windows builds of JackTrip may include support for ASIO. ASIO is a trademark and software of Steinberg Media Technologies GmbH.</p> <p>Using JackTrip to join Virtual Studios on Windows computers may use AVC (h264) video encoders and decoders subject to the AVC Patent Portfolio License.</p> <p>The text of individual licenses is provided in the <code>LICENSES/</code> folder.</p>"},{"location":"About/License/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2008-2024 Juan-Pablo Caceres, Chris Chafe, et al.   SoundWIRE group at CCRMA, Stanford University.</p> <p>Virtual Studio interface and integration   Copyright (c) 2022-2025 JackTrip Labs, Inc.</p> <p>Permission is hereby granted, free of charge, to any person   obtaining a copy of this software and associated documentation   files (the \"Software\"), to deal in the Software without   restriction, including without limitation the rights to use,   copy, modify, merge, publish, distribute, sublicense, and/or sell   copies of the Software, and to permit persons to whom the   Software is furnished to do so, subject to the following   conditions:</p> <p>The above copyright notice and this permission notice shall be   included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR   OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"About/License/#gpl-license","title":"GPL License","text":"<pre><code>                GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007\n</code></pre> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works.  By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.  We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors.  You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights.  Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received.  You must make sure that they, too, receive or can get the source code.  And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software.  For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so.  This is fundamentally incompatible with the aim of protecting users' freedom to change the software.  The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable.  Therefore, we have designed this version of the GPL to prohibit the practice for those products.  If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary.  To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                   TERMS AND CONDITIONS\n</code></pre> <ol> <li>Definitions.</li> </ol> <p>\"This License\" refers to version 3 of the GNU General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License.  Each licensee is addressed as \"you\".  \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.  The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.  Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies.  Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License.  If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p> <ol> <li>Source Code.</li> </ol> <p>The \"source code\" for a work means the preferred form of the work for making modifications to it.  \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form.  A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.  However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.  For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p> <ol> <li>Basic Permissions.</li> </ol> <p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.  This License explicitly affirms your unlimited permission to run the unmodified Program.  The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.  This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.  You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright.  Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below.  Sublicensing is not allowed; section 10 makes it unnecessary.</p> <ol> <li>Protecting Users' Legal Rights From Anti-Circumvention Law.</li> </ol> <p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p> <ol> <li>Conveying Verbatim Copies.</li> </ol> <p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p> <ol> <li>Conveying Modified Source Versions.</li> </ol> <p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <pre><code>a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n</code></pre> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit.  Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p> <ol> <li>Conveying Non-Source Forms.</li> </ol> <p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <pre><code>a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n</code></pre> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling.  In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage.  For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product.  A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.  The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information.  But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.  Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p> <ol> <li>Additional Terms.</li> </ol> <p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law.  If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it.  (Additional permissions may be written to require their own removal in certain cases when you modify the work.)  You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <pre><code>a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n</code></pre> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p> <ol> <li>Termination.</li> </ol> <p>You may not propagate or modify a covered work except as expressly provided under this License.  Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p> <ol> <li>Acceptance Not Required for Having Copies.</li> </ol> <p>You are not required to accept this License in order to receive or run a copy of the Program.  Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance.  However, nothing other than this License grants you permission to propagate or modify any covered work.  These actions infringe copyright if you do not accept this License.  Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p> <ol> <li>Automatic Licensing of Downstream Recipients.</li> </ol> <p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.  You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations.  If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License.  For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p> <ol> <li>Patents.</li> </ol> <p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based.  The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version.  For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement).  To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients.  \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License.  You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p> <ol> <li>No Surrender of Others' Freedom.</li> </ol> <p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.  For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p> <ol> <li>Use with the GNU Affero General Public License.</li> </ol> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work.  The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p> <ol> <li>Revised Versions of this License.</li> </ol> <p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number.  If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions.  However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p> <ol> <li>Disclaimer of Warranty.</li> </ol> <p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <ol> <li>Limitation of Liability.</li> </ol> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <ol> <li>Interpretation of Sections 15 and 16.</li> </ol> <p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <pre><code>                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n</code></pre> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w' and</code>show c' should show the appropriate parts of the General Public License.  Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\".</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs.  If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library.  If this is what you want to do, use the GNU Lesser General Public License instead of this License.  But first, please read https://www.gnu.org/licenses/why-not-lgpl.html.</p>"},{"location":"About/License/#lgpl-license","title":"LGPL License","text":"<pre><code>               GNU LESSER GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007\n</code></pre> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <p>This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below.</p> <ol> <li>Additional Definitions.</li> </ol> <p>As used herein, \"this License\" refers to version 3 of the GNU Lesser General Public License, and the \"GNU GPL\" refers to version 3 of the GNU General Public License.</p> <p>\"The Library\" refers to a covered work governed by this License, other than an Application or a Combined Work as defined below.</p> <p>An \"Application\" is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library.</p> <p>A \"Combined Work\" is a work produced by combining or linking an Application with the Library.  The particular version of the Library with which the Combined Work was made is also called the \"Linked Version\".</p> <p>The \"Minimal Corresponding Source\" for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version.</p> <p>The \"Corresponding Application Code\" for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work.</p> <ol> <li>Exception to Section 3 of the GNU GPL.</li> </ol> <p>You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.</p> <ol> <li>Conveying Modified Versions.</li> </ol> <p>If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version:</p> <p>a) under this License, provided that you make a good faith effort to    ensure that, in the event an Application does not supply the    function or data, the facility still operates, and performs    whatever part of its purpose remains meaningful, or</p> <p>b) under the GNU GPL, with none of the additional permissions of    this License applicable to that copy.</p> <ol> <li>Object Code Incorporating Material from Library Header Files.</li> </ol> <p>The object code form of an Application may incorporate material from a header file that is part of the Library.  You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following:</p> <p>a) Give prominent notice with each copy of the object code that the    Library is used in it and that the Library and its use are    covered by this License.</p> <p>b) Accompany the object code with a copy of the GNU GPL and this license    document.</p> <ol> <li>Combined Works.</li> </ol> <p>You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following:</p> <p>a) Give prominent notice with each copy of the Combined Work that    the Library is used in it and that the Library and its use are    covered by this License.</p> <p>b) Accompany the Combined Work with a copy of the GNU GPL and this license    document.</p> <p>c) For a Combined Work that displays copyright notices during    execution, include the copyright notice for the Library among    these notices, as well as a reference directing the user to the    copies of the GNU GPL and this license document.</p> <p>d) Do one of the following:</p> <pre><code>   0) Convey the Minimal Corresponding Source under the terms of this\n   License, and the Corresponding Application Code in a form\n   suitable for, and under terms that permit, the user to\n   recombine or relink the Application with a modified version of\n   the Linked Version to produce a modified Combined Work, in the\n   manner specified by section 6 of the GNU GPL for conveying\n   Corresponding Source.\n\n   1) Use a suitable shared library mechanism for linking with the\n   Library.  A suitable mechanism is one that (a) uses at run time\n   a copy of the Library already present on the user's computer\n   system, and (b) will operate properly with a modified version\n   of the Library that is interface-compatible with the Linked\n   Version.\n</code></pre> <p>e) Provide Installation Information, but only if you would otherwise    be required to provide such information under section 6 of the    GNU GPL, and only to the extent that such information is    necessary to install and execute a modified version of the    Combined Work produced by recombining or relinking the    Application with a modified version of the Linked Version. (If    you use option 4d0, the Installation Information must accompany    the Minimal Corresponding Source and Corresponding Application    Code. If you use option 4d1, you must provide the Installation    Information in the manner specified by section 6 of the GNU GPL    for conveying Corresponding Source.)</p> <ol> <li>Combined Libraries.</li> </ol> <p>You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following:</p> <p>a) Accompany the combined library with a copy of the same work based    on the Library, uncombined with any other library facilities,    conveyed under the terms of this License.</p> <p>b) Give prominent notice with the combined library that part of it    is a work based on the Library, and explaining where to find the    accompanying uncombined form of the same work.</p> <ol> <li>Revised Versions of the GNU Lesser General Public License.</li> </ol> <p>The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation.</p> <p>If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.</p>"},{"location":"About/License/#avc-license","title":"AVC License","text":"<p>THIS PRODUCT IS LICENSED UNDER THE AVC PATENT PORTFOLIO LICENSE FOR THE PERSONAL USE OF A CONSUMER OR OTHER USES IN WHICH IT DOES NOT RECEIVE REMUNERATION TO (i) ENCODE VIDEO IN COMPLIANCE WITH THE AVC STANDARD (\u201cAVC VIDEO\u201d) AND/OR (ii) DECODE AVC VIDEO THAT WAS ENCODED BY A CONSUMER ENGAGED IN A PERSONAL ACTIVITY AND/OR WAS OBTAINED FROM A VIDEO PROVIDER LICENSED TO PROVIDE AVC VIDEO. NO LICENSE IS GRANTED OR SHALL BE IMPLIED FOR ANY OTHER USE. ADDITIONAL INFORMATION MAY BE OBTAINED FROM MPEG LA, L.L.C. SEE HTTP://WWW.MPEGLA.COM</p>"},{"location":"About/Resources/","title":"Resources","text":""},{"location":"About/Resources/#post-configuration-using-jacktrip","title":"Post Configuration &amp; Using Jacktrip","text":"<p>Detailed instructions at CCRMA</p>"},{"location":"About/Resources/#raspberry-pi","title":"Raspberry Pi","text":"<p>paper accompanying jacktrip demo at Linux Audio Conference 2019</p>"},{"location":"About/Resources/#other-repos","title":"Other Repos","text":"<p>jacktrip (1.0) was released on google code. When that shut down, it migrated to github (1.05, 1.1). It then moved to the CCRMA's cm-gitlab for version 1.2. And as of spring 2020 it moved back to GitHub for the current development.</p>"},{"location":"About/Resources/#links","title":"Links","text":"<ul> <li>Preliminary Documentation and API.</li> <li>Subscribe to the Mailing List.</li> <li>CCRMA.</li> <li>SoundWIRE group.</li> <li>Juan-Pablo Caceres.</li> </ul>"},{"location":"About/Resources/#related-software","title":"Related Software","text":"<p>JMess: A utility to save your audio connections (mess).</p>"},{"location":"Build/CrossCompile/","title":"Cross Compile JackTrip for Windows on Fedora","text":"<pre><code>sudo dnf install mingw64-gcc mingw64-gcc-c++ mingw64-pkg-config mingw64-qt5-qtbase-static\n</code></pre> <pre><code>meson --cross-file win/cross_file.txt build_win\ncd build_win\nmeson compile\n</code></pre> <pre><code>export WINEPATH=/usr/x86_64-w64-mingw32/sys-root/mingw/bin/\nwine64 ./jacktrip.exe\n</code></pre> <p>You might want to copy all necessary DLLs to the same directory as the jacktrip.exe binary.</p>"},{"location":"Build/Linux/","title":"Build Instructions","text":"<p>The following are instructions for compiling Jacktrip from source.  Compiling from source is the best way to keep up with the latest changes, both stable and experimental.  For quicker ways to install Jacktrip, go to README.md in the root directory of the project.</p>"},{"location":"Build/Linux/#dependencies","title":"Dependencies","text":"<ul> <li>C++ compiler</li> <li>Meson</li> <li>Qt5, or Qt6 (required for Virtual Studio)</li> </ul> <p>Optional:</p> <ul> <li>JACK (preferred) or RtAudio (for clients only)</li> <li>help2man for generating the manpage</li> </ul>"},{"location":"Build/Linux/#fedora-qt5","title":"Fedora (Qt5)","text":"<pre><code>dnf install qt5-qtbase-devel qt5-qtnetworkauth-devel qt5-qtwebsockets-devel qt5-qtquickcontrols2-devel qt5-qtsvg-devel\ndnf groupinstall \"C Development Tools and Libraries\"\ndnf groupinstall \"Development Tools\"\ndnf install \"pkgconfig(jack)\" rtaudio-devel git help2man python3-jinja2 dbus-devel\n</code></pre>"},{"location":"Build/Linux/#fedora-qt6","title":"Fedora (Qt6)","text":"<pre><code>dnf install qt6-qtbase-devel qt5-qtnetworkauth-devel qt5-qtwebsockets-devel qt5-qtquickcontrols2-devel qt5-qtsvg-devel qt6-qtwebengine-devel qt6-qtwebchannel-devel qt6-qt5compat-devel qt6-qtshadertools-devel\ndnf groupinstall \"C Development Tools and Libraries\"\ndnf groupinstall \"Development Tools\"\ndnf install \"pkgconfig(jack)\" rtaudio-devel git help2man python3-jinja2 dbus-devel\n</code></pre> <p>Clone the git repo with submodules and run <code>./build install</code> in the project directory or use QtCreator to compile.</p>"},{"location":"Build/Linux/#ubuntu-and-debianraspbian-qt5","title":"Ubuntu and Debian/Raspbian (Qt5)","text":"<pre><code>apt install --no-install-recommends build-essential autoconf automake libtool make libjack-jackd2-dev git help2man python3-jinja2\napt install qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake qttools5-dev libqt5svg5-dev libqt5websockets5-dev qtdeclarative5-dev qtquickcontrols2-5-dev\n</code></pre>"},{"location":"Build/Linux/#ubuntu-and-debianraspbian-qt6","title":"Ubuntu and Debian/Raspbian (Qt6)","text":"<pre><code>apt install --no-install-recommends build-essential autoconf automake libtool make libjack-jackd2-dev git help2man libclang-dev libdbus-1-dev libdbus-1-dev python3-jinja2\napt install -y libqt6core6 libqt6gui6 libqt6network6 libqt6widgets6 libqt6qml6 libqt6qmlcore6 libqt6quick6 libqt6quickcontrols2-6 libqt6svg6  libqt6webchannel6 libqt6webengine6-data libqt6webenginecore6 libqt6webenginecore6-bin libqt6webenginequick6 libqt6websockets6 libqt6shadertools6 qt6-qpa-plugins qml6-module-qtquick-controls qml6-module-qtqml-workerscript qml6-module-qtquick-templates qml6-module-qtquick-layouts qml6-module-qt5compat-graphicaleffects qml6-module-qtwebchannel qml6-module-qtwebengine qml6-module-qtquick-window\napt install qt6-base-dev qt6-base-dev-tools qmake6 qt6-tools-dev qt6-declarative-dev qt6-webengine-dev qt6-webview-dev qt6-webview-plugins libqt6svg6-dev libqt6websockets6-dev libqt6core5compat6-dev libqt6shadertools6-dev libgl1-mesa-dev\n# for GUI builds\napt install libfreetype6-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev libdrm-dev libglu1-mesa-dev libwayland-dev libwayland-egl1-mesa libgles2-mesa-dev libwayland-server0 libwayland-egl-backend-dev libxcb1-dev libxext-dev libfontconfig1-dev libxrender-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev '^libxcb.*-dev' libxcb-render-util0-dev libxcomposite-dev libgtk-3-dev\napt install librtaudio-dev # if building with RtAudio\n</code></pre> <p>Clone the git repo with submodules and run <code>./build install</code> in the project directory or use QtCreator to compile.</p>"},{"location":"Build/Linux/#building-and-installation-instructions","title":"Building and Installation instructions","text":"<p>For other Linux distributions, install the dependencies listed above.</p> <p>To clone the repo in the Terminal: <pre><code>$ git clone --recurse-submodules https://github.com/jacktrip/jacktrip.git\n</code></pre> Note that we need <code>--recurse-submodules</code> to also get the submodules!</p> <p>Next, navigate to the cloned repository: <pre><code>$ cd jacktrip\n</code></pre></p> <p>JackTrip uses meson. To configure a build directory, use <code>meson setup</code> with the following parameters:</p> <ul> <li> <p><code>rtaudio</code>: Enabled this to build with support for the RtAudio backend.   If an existing installation is found, it will be used. Otherwise, meson   uses a subproject to download and install the latest supported release.   JackTrip supports both RtAudio v5 and v6.</p> </li> <li> <p><code>jack</code>: Enable this to link directly with libraries for the Jack Audio   Toolkit. JackTrip will fail if these cannot be found at runtime.</p> </li> <li> <p><code>weakjack</code>: Enable this to build with support for the Jack Audio Toolkit,   with support for dynamically loading the libraries at runtime. JackTrip   will still work if they cannot be found. This requires <code>rtaudio</code> and   uses a git submodule.</p> </li> <li> <p><code>nogui</code>: Build without support for a graphical user interface (this   also disables support for Virtual Studio). Only basic command line   features will be included. This requires fewer dependencies, and   supports static builds.</p> </li> <li> <p><code>novs</code>: Build without support for Virtual Studio. Virtual Studio   requires Qt6 with the WebEngine and WebChannel libraries installed.</p> </li> <li> <p><code>vsftux</code>: Skip the \"Yes\" / \"No\" first time run screen asking users if   they would like to use the Virtual Studio interface. Classic mode can   still be selected at startup, and can be used at any time.</p> </li> <li> <p><code>noupdater</code>: Build without support for automatic updates. This is   implied and has no effect when building for Linux.</p> </li> <li> <p><code>nofeedback</code>: Build without support for feedback detection. This   feature is optional, and uses the SimpleFFT third party library.</p> </li> <li> <p><code>profile</code>: Choose build profile / Sets desktop id accordingly</p> </li> <li> <p><code>qtversion</code>: Choose to build with either Qt5 or Qt6</p> </li> <li> <p><code>buildinfo</code>: Additional info used to describe the build</p> </li> </ul> <p>For example: <pre><code>$ meson setup -Drtaudio=enabled builddir\n</code></pre></p> <p>To build JackTrip, run: <pre><code>$ meson compile -C builddir\n</code></pre></p> <p>To install JackTrip, run: <pre><code>$ meson install -C builddir\n# enter your password when prompted\n</code></pre></p>"},{"location":"Build/Linux/#building-with-docker","title":"Building with Docker","text":"<p>You can also build JackTrip using Docker, which especially makes it easier to build for alternative architectures. The following build arguments are available:</p> <ul> <li>BUILD_CONTAINER - Debian based container image to build with</li> <li>MESON_ARGS - arguments to build using meson</li> <li>QT_DOWNLOAD_URL - path to qt6 download (optional)</li> <li>VST3SDK_DOWNLOAD_URL - path to the VST3 SDK (optional)</li> <li>USE_SYSTEM_LIBSAMPLERATE - dynamically link with libsamplerate</li> </ul> <p>For example:</p> <p>amd64 dynamic <pre><code>docker buildx build --target=artifact -f linux/Dockerfile.build --output type=local,dest=./ \\\n  --platform linux/amd64 --build-arg BUILD_CONTAINER=ubuntu:22.04 \\\n  --build-arg MESON_ARGS=\"-Ddefault_library=shared -Drtaudio=enabled -Drtaudio:jack=disabled -Drtaudio:default_library=static -Drtaudio:alsa=enabled -Drtaudio:pulse=enabled -Drtaudio:werror=false\" .\n</code></pre></p> <p>amd64 static <pre><code>docker buildx build --target=artifact -f linux/Dockerfile.build --output type=local,dest=./ \\\n  --platform linux/amd64 --build-arg BUILD_CONTAINER=ubuntu:20.04 \\\n  --build-arg MESON_ARGS=\"-Ddefault_library=static -Drtaudio=enabled -Drtaudio:jack=disabled -Drtaudio:default_library=static -Drtaudio:alsa=enabled -Drtaudio:pulse=disabled -Drtaudio:werror=false -Dnogui=true\" \\\n  --build-arg QT_DOWNLOAD_URL=https://files.jacktrip.org/contrib/qt/qt-6.8.3-static-linux-amd64.tar.gz .\n</code></pre></p> <p>arm64 dynamic <pre><code>docker buildx build --target=artifact -f linux/Dockerfile.build --output type=local,dest=./ \\\n  --platform linux/arm64 --build-arg BUILD_CONTAINER=ubuntu:22.04 \\\n  --build-arg MESON_ARGS=\"-Ddefault_library=shared -Drtaudio=enabled -Drtaudio:jack=disabled -Drtaudio:default_library=static -Drtaudio:alsa=enabled -Drtaudio:pulse=enabled -Drtaudio:werror=false\" .\n</code></pre></p> <p>arm64 static <pre><code>docker buildx build --target=artifact -f linux/Dockerfile.build --output type=local,dest=./ \\\n  --platform linux/arm64 --build-arg BUILD_CONTAINER=ubuntu:20.04 \\\n  --build-arg MESON_ARGS=\"-Ddefault_library=static -Drtaudio=enabled -Drtaudio:jack=disabled -Drtaudio:default_library=static -Drtaudio:alsa=enabled -Drtaudio:pulse=disabled -Drtaudio:werror=false -Dnogui=true\" \\\n  --build-arg QT_DOWNLOAD_URL=https://files.jacktrip.org/contrib/qt/qt-6.8.3-static-linux-arm64.tar.gz .\n</code></pre></p> <p>arm32 static <pre><code>docker buildx build --target=artifact -f linux/Dockerfile.build --output type=local,dest=./ \\\n  --platform linux/arm/v7 --build-arg BUILD_CONTAINER=debian:buster \\\n  --build-arg USE_SYSTEM_LIBSAMPLERATE=1 \\\n  --build-arg MESON_ARGS=\"-Ddefault_library=static -Drtaudio=enabled -Drtaudio:jack=disabled -Drtaudio:default_library=static -Drtaudio:alsa=enabled -Drtaudio:pulse=disabled -Drtaudio:werror=false -Dnogui=true -Dcpp_link_args='-no-pie'\" \\\n  --build-arg QT_DOWNLOAD_URL=https://files.jacktrip.org/contrib/qt/qt-5.15.13-static-linux-arm32.tar.gz .\n</code></pre></p>"},{"location":"Build/Linux/#verification","title":"Verification","text":"<p>If you have installed jacktrip, from anywhere in the Terminal, type: <pre><code>$ jacktrip -v\n</code></pre></p> <p>If you have compiled from source without installing, in the <code>/builddir</code> directory type: <pre><code>$ ./jacktrip -v\n</code></pre></p> <p>If you see something like this, you have successfully installed JackTrip:</p> <pre><code>JackTrip VERSION: 2.x.x\nCopyright (c) 2008-2020 Juan-Pablo Caceres, Chris Chafe.\nSoundWIRE group at CCRMA, Stanford University\n</code></pre>"},{"location":"Build/Linux/#running-two-versions-of-jacktrip-in-parallel","title":"Running Two Versions of JackTrip in Parallel","text":"<p>One level above the project directory of your current JackTrip installation, clone the JackTrip repository again in another directory (e.g. <code>jacktrip-1.x.x</code>):</p> <pre><code>$ git clone --recurse-submodules https://github.com/jacktrip/jacktrip.git jacktrip-1.x.x\n</code></pre> <p>You now have two separate folders side by side: the new version in the jacktrip-1.x.x folder and the original one in the jacktrip folder. To build the new version without installing it: <pre><code>$ cd jacktrip-1.x.x\n$ ./build\n</code></pre></p> <p>To experiment with the new version of JackTrip, enter builddir/build directory and check the JackTrip version: <pre><code>$ cd builddir\n$ ./jacktrip -v\n</code></pre></p> <p>You can use JackTrip from this directory, e.g.: <pre><code>$ ./jacktrip -C serveraddress\n</code></pre></p> <p>You can switch back and forth between different JackTrip versions by running them in their respective build directories.</p> <p>Hint: If you lose track of where you are, this command will show your present working directory: <pre><code>$ pwd\n</code></pre></p> <p>The new version's directory structure might look like this: <code>jacktrip-1.x.x/builddir</code> and the old version <code>jacktrip/builddir</code>.</p>"},{"location":"Build/Linux/#building-vst3-sdk-for-linux","title":"Building VST3 SDK for Linux","text":"<p>You may need a few extra development libraries to build the VST3 SDK:</p> <p>On Fedora: <pre><code>sudo dnf install -y expat-devel freetype-devel pango-devel xcb-util-devel xcb-util-cursor-devel xcb-util-keysyms-devel libxkbcommon-x11-devel gtkmm3.0-devel libsqlite3x-devel\n</code></pre></p> <p>On Ubuntu and Debian/Raspbian: <pre><code>sudo apt install -y libexpat-dev libxml2-dev libxcb-util-dev libxcb-cursor-dev libxcb-keysyms1-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev libgtkmm-3.0-dev libsqlite3-dev\n</code></pre></p> <p>To build and install the VST3 SDK: <pre><code>git clone --recursive https://github.com/steinbergmedia/vst3sdk\nmkdir vst3sdk/build\ncd vst3sdk/build\ncmake -DCMAKE_BUILD_TYPE=Release ../\ncmake --build . --config Release\nsudo mkdir -p /opt/vst3sdk\nsudo cp -r lib/Release /opt/vst3sdk/lib\nsudo cp -r bin/Release /opt/vst3sdk/bin\nsudo cp -r ../base ../pluginterfaces ../public.sdk ../vstgui4 /opt/vst3sdk\n</code></pre></p> <p>When you run <code>meson setup</code> use <code>-Dvst-sdkdir=/path/to/vst3sdk</code></p> <p>Please note that redistribution of JackTrip's VST3 plugin requires a license from Steinberg.</p>"},{"location":"Build/Mac/","title":"Build Instructions","text":"<p>The following are instructions for compiling Jacktrip from source.  Compiling from source is the best way to keep up with the latest changes, both stable and experimental.  For quicker ways to install Jacktrip, go to README.md in the root directory of the project.</p>"},{"location":"Build/Mac/#dependencies","title":"Dependencies","text":"<ul> <li>C++ compiler</li> <li>Qt5</li> <li>JACK</li> </ul> <p>RtAudio is no longer a dependency. You might want to skip the steps you don't need.</p> <p>Install Jack2 https://jackaudio.org/downloads/</p> <p>If this command returns the XCode version, you have it installed: <pre><code>xcodebuild -version\n</code></pre> If you don't have XCode, go to the AppStore to download and install it.</p> <p>If this command returns the version number of the package manager Homebrew, you have it installed: <pre><code>brew -v\n</code></pre> If you don't have Homebrew, install it: <pre><code>/bin/bash -c \"$(curl -fsSLhttps://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n</code></pre></p> <p>To install git if you don't have it: <pre><code>brew install git\n</code></pre></p> <p>Install and link qt5: <pre><code>brew install qt5\nbrew link qt5 --force\n</code></pre></p> <p>Clone the git repo and run <code>./build</code> in the src directory or use QtCreator to compile</p>"},{"location":"Build/Mac/#build","title":"Build","text":"<p>You can compile using the build script or QtCreator.</p> <p>To clone the repo in the Terminal: $ git clone --recurse-submodules https://github.com/jacktrip/jacktrip.git</p> <p>To compile using the build script: <pre><code>$ cd jacktrip\n$ ./build\n$ cd builddir\n$ ls\n</code></pre></p> <p>You should see a <code>jacktrip</code> executable in this folder.</p> <p>If the build script doesn't work, try building the Makefiles yourself. You'd need qmake. Then you can build by:</p> <pre><code>$ qmake jacktrip.pro\n$ make release\n</code></pre> <p>To build using QtCreator:</p> <ul> <li>Open jacktrip.pro using QtCreator</li> <li>Choose a correctly configured Kit</li> </ul> <p>QtCreator places the <code>jacktrip</code> executable by default in a folder with a name like <code>build-jacktrip-Desktop_x86_darwin_generic_mach_o_64bit-Release/</code>.</p>"},{"location":"Build/Mac/#installation","title":"Installation","text":"<p>You need to have a working Jack installation on your machine (see Dependencies above).</p> <p>To install using Terminal (skip the first three steps if you've already followed the Build instructions above):</p> <pre><code>$ git clone --recurse-submodules https://github.com/jacktrip/jacktrip.git\n$ cd jacktrip\n$ ./build\n$ cd builddir\n$ sudo cp qjacktrip /usr/local/bin/\n  (enter your password when prompted)\n$ sudo cp jacktrip /usr/local/bin/\n\n$ sudo chmod 755 /usr/local/bin/qjacktrip\n  (now you can run jacktrip from any directory using Terminal)\n</code></pre>"},{"location":"Build/Mac/#verification","title":"Verification","text":"<p>If you have installed jacktrip, from anywhere in the Terminal, type: <pre><code>$ jacktrip -v\n</code></pre></p> <p>If you have compiled from source without installing, in the /builddir directory type: <pre><code>$ ./jacktrip -v\n</code></pre></p> <p>If you see something like this, you have successfully installed Jacktrip:</p> <pre><code>JackTrip VERSION: 1.xx\nCopyright (c) 2008-2020 Juan-Pablo Caceres, Chris Chafe.\nSoundWIRE group at CCRMA, Stanford University\n</code></pre>"},{"location":"Build/Mac/#building-vst3-sdk-for-mac","title":"Building VST3 SDK for Mac","text":"<pre><code>git clone --recursive https://github.com/steinbergmedia/vst3sdk\nmkdir vst3sdk/build\ncd vst3sdk/build\ncmake -DCMAKE_BUILD_TYPE=Release -DSMTG_CREATE_PLUGIN_LINK=0 -DCMAKE_OSX_ARCHITECTURES=\"x86_64;arm64\" -DCMAKE_OSX_DEPLOYMENT_TARGET=12 ../\ncmake --build . --config Release\nsudo mkdir -p /opt/vst3sdk\nsudo cp -r lib/Release /opt/vst3sdk/lib\nsudo cp -r bin/Release /opt/vst3sdk/bin\nsudo cp -r ../base ../pluginterfaces ../public.sdk ../vstgui4 /opt/vst3sdk\n</code></pre> <p>VST plugins are not allowed to have any shared library dependencies. You can currently only build it when using a static build of Qt. Note that this also requires configuring Meson without support for the GUI.</p> <p>When you run <code>meson setup</code> use <code>-Dvst-sdkdir=/path/to/vst3sdk</code></p> <p>Please note that redistribution of JackTrip's VST3 plugin requires a license from Steinberg.</p>"},{"location":"Build/Meson_build/","title":"Build and Installation Instructions with Meson","text":"<p>Meson is a modern and fast build system with a lot of features. You can find its documentation at mesonbuild.com.</p>"},{"location":"Build/Meson_build/#install-dependencies","title":"Install Dependencies","text":"FedoraDebian/UbuntuMacOS <pre><code>dnf install meson qt5-qtbase-devel qt5-qtquickcontrols2-devel qt5-qtsvg-devel qt5-qtnetworkauth-devel qt5-qtwebsockets-devel rtaudio-devel \"pkgconfig(jack)\" help2man python3-jinja2 python3-pyyaml\n</code></pre> <pre><code>apt install meson build-essential qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake qttools5-dev libqt5svg5-dev libqt5networkauth5-dev libqt5websockets5-dev qtdeclarative5-dev qtquickcontrols2-5-dev libjack-jackd2-dev git help2man\n</code></pre> <pre><code>brew install meson qt5 rtaudio help2man\n</code></pre> <p>You also need to install Jack, unless you want to disable jack support (<code>-Djack=disabled</code>). On macOS Jack is often installed using an installer from the Jack2 release page. You can also install it using homebrew (<code>brew install jack</code>), but you should not use both installation methods simultaneously.</p> <p>Meson might not find qt when installed with brew. But brew tells you to set PKG_CONFIG_PATH to a directory where it finds qt's pkgconfig file. This directory has to be set as additional pkgconfig path in meson:</p> <pre><code>meson --buildtype release --pkg-config-path `brew --prefix qt5`/lib/pkgconfig build_release\n</code></pre>"},{"location":"Build/Meson_build/#configuration","title":"Configuration","text":"<p>If you are in a build directory, <code>meson configure</code> shows you all available options. Current project options are <code>jack</code>, <code>nogui</code>, <code>rtaudio</code> and <code>wair</code>. Meson shows you also the options of subprojects like RtAudio.</p>"},{"location":"Build/Meson_build/#build","title":"Build","text":"<p>Meson builds in a separate directory. It doesn't touch anything of your project. This way you can have separate debug and release build directories for example. </p> <p>Prepare your build directory: <pre><code>meson builddir                                  # defaults to debug build\n\n## Additional build directories\nmeson --buildtype release build_release         # release build\nmeson --buildtype debugoptimized build_debug    # optimized debug build\n</code></pre></p> <p>Meson can download and build RtAudio as a subproject, if RtAudio is not available on your system. By default it only checks the dependency on your system. If you want to use the subproject you have to explicitly enable rtaudio.</p> <pre><code>cd builddir\nmeson configure -Drtaudio=enabled\n</code></pre> <p>If <code>help2man</code> is found, Meson will create a manpage from <code>jacktrip --help</code>.</p> <p>Now build with: <pre><code>cd builddir\nninja\n</code></pre></p> <p>Install with: <pre><code>sudo ninja install\n</code></pre></p>"},{"location":"Build/Windows/","title":"WINDOWS (XP and later)","text":"<ul> <li>Note: Some users have reported success using the PortAudio driver, though it   is not currently supported.</li> </ul>"},{"location":"Build/Windows/#build","title":"Build","text":"<p>Note: WIN10BUILDINSTRUCTIONS.pdf (in the same directory as this file) has screenshots of the Windows 10 build process and step-by-step instructions.</p> <p>If you do not have Git installed, download it from https://git-scm.com/download/win. Open the command line by typing cmd.exe in the Windows search bar.</p> <p>Use the <code>cd</code> command to navigate to the directory where you would like to install jacktrip, e.g. <code>cd C:\\Users\\Your User Name\\</code>.</p> <p>Use <code>git clone --recurse-submodules https://github.com/jacktrip/jacktrip.git</code> to download a fresh copy of the repo or <code>git pull</code> to update your repo.</p> <p>On Windows 10, the easiest way to build is in the command line:</p> <ul> <li>To add the location of qmake to the path, in the Windows search bar, type \"environment variable\" and click on the Environment Variables button in the Advanced tab of System Properties.  Find the Path variable in System variables, click Edit, and enter the location of qmake, e.g. <code>C:\\Qt\\5.15.0\\mingw81_64\\bin</code>, where 5.15.0 is the version of Qt you installed. To verify you have g++ installed, type <code>where g++</code> in the command line.  If the command returns <code>not found</code> rather than a path, go to the Qt Maintenance Tool, which might be in a directory such as <code>C:\\Qt\\maintenancetool.exe</code>, and remove, then reinstall Qt. In the command line, use the <code>cd</code> command to navigate to the project directory, e.g. <code>cd jacktrip</code> and execute the following commands: mkdir builddir (this step creates the build directory, and is only necessary if you're building for the first time)</li> </ul> <pre><code>$ cd builddir\n$ qmake -spec win32-g++ ../src/jacktrip.pro # you may skip this step if you're building for the first time\n$ mingw32-make clean # you may skip this step if you're building for the first time\n$ qmake -spec win32-g++ ../src/jacktrip.pro\n$ mingw32-make release\n</code></pre> <p>On earlier Windows versions, the easiest way to build is to download the free Qt Creator IDE from https://www.qt.io/download since the jacktrip buildscript is written in qmake. Open the <code>src/jacktrip.pro</code> and configure the project. Make sure to select the MinGW compiler (for example the one shipped with QtCreator). Building with Clang or Microsoft Visual Studio Compilers is currently not supported!</p> <p>Download Jack2 from https://jackaudio.org/downloads/ Make sure to install Jack into <code>C:\\Program Files (x86)\\Jack</code> (as this is the path where the jacktrip build script will look for it).</p> <p>Hit build in QtCreator.</p> <p>Copy the dll files <code>Qt5Core.dll</code> and <code>Qt5Network.dll</code> from your compiler's bin directory, e.g. <code>C:\\Qt\\5.15.0\\mingw81_64\\bin</code> to the folder in your project where your <code>jacktrip.exe</code> is located, e.g. <code>C:\\Users\\Your Name\\jacktrip\\build-jacktrip-Desktop-Qt_5_15_0_MinGW_64_bit-Release\\release</code>. In the above example, 5.15.0 is the version of Qt, MinGW 64 bit is the compiler. The folder names may vary according to the Qt and compiler versions you are using.</p> <p>Note: compiling with modifications in the .pro file (like adding a new source or       header file) requires qmake which is only available in the Qt Creator       package.</p>"},{"location":"Build/Windows/#verification","title":"Verification","text":"<p>In the search field (Windows key + R), enter cmd.exe to open the command line. Use the <code>cd</code> command to navigate to the directory where the executable jacktrip.exe is located, e.g. <code>C:\\Users\\Your Name\\jacktrip\\build-jacktrip-Desktop-Qt_5_15_0_MinGW_64_bit-Release\\release</code>.</p> <p>From there, the following command should return the version of Jacktrip you installed: <pre><code>jacktrip.exe -v\n</code></pre></p> <p>If you see something like this, you have successfully installed Jacktrip:</p> <pre><code>JackTrip VERSION: 1.xx\nCopyright (c) 2008-2020 Juan-Pablo Caceres, Chris Chafe.\nSoundWIRE group at CCRMA, Stanford University\n</code></pre>"},{"location":"Build/Windows/#building-vst3-sdk-for-windows","title":"Building VST3 SDK for Windows","text":"<pre><code>git clone --recursive https://github.com/steinbergmedia/vst3sdk\nmkdir vst3sdk/build\ncd vst3sdk/build\ncmake -G \"Visual Studio 17 2022\" -A x64 -DSMTG_CREATE_PLUGIN_LINK=0 -DCMAKE_CXX_FLAGS=\"/MD\" ../\ncmake --build . --config Release\nmkdir c:\\vst3sdk\nxcopy /E lib\\Release c:\\vst3sdk\\lib\\\nxcopy /E bin\\Release c:\\vst3sdk\\bin\\\nxcopy /E ..\\base c:\\vst3sdk\\base\\\nxcopy /E ..\\pluginterfaces c:\\vst3sdk\\pluginterfaces\\\nxcopy /E ..\\public.sdk c:\\vst3sdk\\public.sdk\\\nxcopy /E ..\\vstgui4 c:\\vst3sdk\\vstgui4\\\n</code></pre> <p>VST plugins are not allowed to have any shared library dependencies. You can currently only build it when using a static build of Qt. Note that this also requires configuring Meson without support for the GUI.</p> <p>When you run <code>meson setup</code> use <code>-Dnogui=true -Dvst-sdkdir=c:\\vst3sdk</code></p> <p>Please note that redistribution of JackTrip's VST3 plugin requires a license from Steinberg.</p>"},{"location":"DevTools/Formatting/","title":"Formatting with clang-format","text":"<p>JackTrip uses clang-format to specify the Code Formatting Style. Most IDEs are able to recognize the <code>.clang-format</code> file in JackTrip's project directory and integrate the formatting capabilities.</p> <p>Formatting specific files is done like this:</p> <pre><code>clang-format -i class.cpp class.h\n</code></pre> <p>This overrides all given files. If you only want to check the formatting <code>-i</code> has to be removed.</p> <p>Areas in the source code that must not be formatted have to be embraced in following statements:</p> <pre><code>this = is.formatted;\n// clang-format off\nthis+=   isnot     ;\n// clang-format on\nthis = again;\n</code></pre>"},{"location":"DevTools/Formatting/#forget-about-formatting-with-a-git-pre-commit-hook","title":"Forget about formatting with a git pre-commit hook","text":"<p>With git the user can install hooks that are executed when specific tasks are done. We can add a pre-commit hook for clang-format. So that everytime we commit our changes, git runs clang-format for us.</p> <p>Handling git hooks by hand is cumbersome. With pre-commit this becomes a lot easier.</p> <p>Pre-commit is a Python app that can be installed with pip.</p> <pre><code>pip install pre-commit\n</code></pre> <p>Within the root directory of the jacktrip repository the pre-commit hook can be installed as follows:</p> <pre><code>pre-commit install\n</code></pre> <p>Pre-commit only runs on changed files. Running pre-commit on all files is done by:</p> <pre><code>pre-commit run --all-files\n</code></pre> <p>Sometimes these hooks come into your way. But you can disable them when committing:</p> <pre><code>git commit -am \"Commit all my stuff\" --no-verify\n</code></pre>"},{"location":"DevTools/Formatting/#pre-commit-configuration","title":"Pre-commit configuration","text":"<p>Pre-commit is configured by the .pre-commit-config.yaml file in the repository's root. Currently it only includes the clang-format hook.</p> <pre><code>fail_fast: false\nrepos:\n  - repo: https://github.com/ssciwr/clang-format-hook\n    rev: v13.0.1\n    hooks:\n    - id: clang-format\n      files: ^src/\n      types_or: [c++]\n      exclude: '^src/.+dsp\\.h'\n</code></pre>"},{"location":"DevTools/StaticAnalysis/","title":"Static Analysis","text":"<p>Static analysis tools usually needs a <code>compile_commands.json</code> file. If you use Meson to build JackTrip, it already created this file in your build directory.</p>"},{"location":"DevTools/StaticAnalysis/#scan-build","title":"Scan-Build","text":"<p>If you only want to run basic static analysis on JackTrip, you can install scan-build. Meson will automatically generate a scan-build target for you:</p> <pre><code>ninja -C builddir scan-build\n</code></pre> <p>This should never show any warnings or errors.</p>"},{"location":"DevTools/StaticAnalysis/#clang-tidy","title":"Clang-Tidy","text":"<p>If you installed clang-tidy and there's a <code>.clang-tidy</code> file in the project directory, Meson generates a clang-tidy target, too.  The <code>.clang-tidy</code> file defines which checks should be run. Running clang-tidy on the entire code base:</p> <pre><code>ninja -C builddir clang-tidy\n</code></pre> <p>In most cases you want to run clang-tidy on single files.</p> <pre><code>cd src\nrun-clang-tidy.py -j 4 -p ../builddir singlefile.cpp\n</code></pre> <p>In <code>-j #</code>, <code>#</code> specifies the number of tidy instances that run in parallel.</p>"},{"location":"DevTools/StaticAnalysis/#fixes","title":"Fixes","text":"<p>For some checks clang-tidy offers automatic fixes. Some of these are save to apply without worries. Others should be checked afterwards.</p> <pre><code>run-clang-tidy.py -fix -j 4 -p ../builddir singlefile.cpp\n</code></pre>"},{"location":"Documentation/MkDocs/","title":"Write Documentation","text":"<p>This documentation of JackTrip is generated with Material theme for MkDocs. All pages are derived from Markdown files in the subdirectory <code>docs</code> in JackTrip's git repository. Setup and table of contents is found in a YAML file called mkdocs.yml in the root directory.</p> <p>If you only want to edit a page you can click on the pen symbol at the top of each page.</p>"},{"location":"Documentation/MkDocs/#mkdocs-preview-in-prs","title":"MkDocs preview in PRs","text":"<p>If you submit changes to the docs as a Pull Request, the <code>Render docs preview</code> workflow will generate a static version of the documentation, including the proposed changes. It can be downloaded from GitHub Actions for checking offline (see \"Checks\" tab on top of the PRs page, then select <code>Render docs preview</code> and find the archive at the bottom of that page). </p> <p>When you're working on the changes locally, it might be more convenient to test changes as they're being made by running mkdocs on your system (see below).</p>"},{"location":"Documentation/MkDocs/#run-mkdocs-on-your-system","title":"Run MkDocs on Your System","text":"<p>MkDocs and Material for MkDocs are installed from pip: <pre><code>pip install mkdocs mkdocs-material mkdocs-macros-plugin\n</code></pre></p> <p>When writing documentation it is very handy to run <code>mkdocs serve</code>. This will open a local webserver (usually at http://127.0.0.1:8000/). If you change Markdown files of the documentation and save them, the website automatically updates. </p>"}]}